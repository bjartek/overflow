&overflow.OverflowSolution{
	Transactions: map[string]*overflow.OverflowDeclarationInfo{
		"aTransaction": {
			ParameterOrder: []string{},
			Parameters:     map[string]string{},
		},
		"arguments": {
			ParameterOrder: []string{"test"},
			Parameters:     map[string]string{"test": "String"},
			Authorizers: []*ast.ReferenceType{{
				Type: &ast.NominalType{
					Identifier: ast.Identifier{
						Identifier: "Account",
						Pos: ast.Position{
							Offset: 137,
							Line:   4,
							Column: 33,
						},
					},
				},
				StartPos: ast.Position{
					Offset: 122,
					Line:   4,
					Column: 18,
				},
				Authorization: &ast.Authorization{EntitlementSet: &ast.ConjunctiveEntitlementSet{Elements: []*ast.NominalType{{Identifier: ast.Identifier{
					Identifier: "Storage",
					Pos: ast.Position{
						Offset: 127,
						Line:   4,
						Column: 23,
					},
				}}}}},
			}},
		},
		"argumentsWithAccount": {
			ParameterOrder: []string{"test"},
			Parameters:     map[string]string{"test": "Address"},
			Authorizers: []*ast.ReferenceType{{
				Type: &ast.NominalType{Identifier: ast.Identifier{
					Identifier: "Account",
					Pos: ast.Position{
						Offset: 124,
						Line:   4,
						Column: 19,
					},
				}},
				StartPos: ast.Position{
					Offset: 123,
					Line:   4,
					Column: 18,
				},
			}},
		},
		"create_nft_collection": {
			ParameterOrder: []string{},
			Parameters:     map[string]string{},
		},
		"emulatorFoo": {
			ParameterOrder: []string{"test"},
			Parameters:     map[string]string{"test": "String"},
			Authorizers: []*ast.ReferenceType{{
				Type: &ast.NominalType{Identifier: ast.Identifier{
					Identifier: "Account",
					Pos: ast.Position{
						Offset: 141,
						Line:   4,
						Column: 37,
					},
				}},
				StartPos: ast.Position{
					Offset: 122,
					Line:   4,
					Column: 18,
				},
				Authorization: &ast.Authorization{EntitlementSet: &ast.ConjunctiveEntitlementSet{Elements: []*ast.NominalType{{Identifier: ast.Identifier{
					Identifier: "BorrowValue",
					Pos: ast.Position{
						Offset: 127,
						Line:   4,
						Column: 23,
					},
				}}}}},
			}},
		},
		"mainnetFoo": {
			ParameterOrder: []string{"test"},
			Parameters:     map[string]string{"test": "String"},
			Authorizers: []*ast.ReferenceType{{
				Type: &ast.NominalType{Identifier: ast.Identifier{
					Identifier: "Account",
					Pos: ast.Position{
						Offset: 123,
						Line:   4,
						Column: 19,
					},
				}},
				StartPos: ast.Position{
					Offset: 122,
					Line:   4,
					Column: 18,
				},
			}},
		},
		"mainnetaTransaction": {
			ParameterOrder: []string{},
			Parameters:     map[string]string{},
		},
		"mainnetzTransaction": {
			ParameterOrder: []string{},
			Parameters:     map[string]string{},
		},
		"mint_tokens": {
			ParameterOrder: []string{
				"recipient",
				"amount",
			},
			Parameters: map[string]string{
				"amount":    "UFix64",
				"recipient": "Address",
			},
			Authorizers: []*ast.ReferenceType{{
				Type: &ast.NominalType{Identifier: ast.Identifier{
					Identifier: "Account",
					Pos: ast.Position{
						Offset: 272,
						Line:   9,
						Column: 39,
					},
				}},
				StartPos: ast.Position{
					Offset: 253,
					Line:   9,
					Column: 20,
				},
				Authorization: &ast.Authorization{EntitlementSet: &ast.ConjunctiveEntitlementSet{Elements: []*ast.NominalType{{Identifier: ast.Identifier{
					Identifier: "BorrowValue",
					Pos: ast.Position{
						Offset: 258,
						Line:   9,
						Column: 25,
					},
				}}}}},
			}},
		},
		"signWithMultipleAccounts": {
			ParameterOrder: []string{"test"},
			Parameters:     map[string]string{"test": "String"},
			Authorizers: []*ast.ReferenceType{
				{
					Type: &ast.NominalType{Identifier: ast.Identifier{
						Identifier: "Account",
						Pos: ast.Position{
							Offset: 122,
							Line:   3,
							Column: 19,
						},
					}},
					StartPos: ast.Position{
						Offset: 121,
						Line:   3,
						Column: 18,
					},
				},
				{
					Type: &ast.NominalType{Identifier: ast.Identifier{
						Identifier: "Account",
						Pos: ast.Position{
							Offset: 142,
							Line:   3,
							Column: 39,
						},
					}},
					StartPos: ast.Position{
						Offset: 141,
						Line:   3,
						Column: 38,
					},
				},
			},
		},
		"testnetFoo": {
			ParameterOrder: []string{"test"},
			Parameters:     map[string]string{"test": "String"},
			Authorizers: []*ast.ReferenceType{{
				Type: &ast.NominalType{Identifier: ast.Identifier{
					Identifier: "Account",
					Pos: ast.Position{
						Offset: 137,
						Line:   4,
						Column: 33,
					},
				}},
				StartPos: ast.Position{
					Offset: 122,
					Line:   4,
					Column: 18,
				},
				Authorization: &ast.Authorization{EntitlementSet: &ast.ConjunctiveEntitlementSet{Elements: []*ast.NominalType{{Identifier: ast.Identifier{
					Identifier: "Storage",
					Pos: ast.Position{
						Offset: 127,
						Line:   4,
						Column: 23,
					},
				}}}}},
			}},
		},
		"zTransaction": {
			ParameterOrder: []string{},
			Parameters:     map[string]string{},
		},
	},
	Scripts: map[string]*overflow.OverflowDeclarationInfo{
		"aScript": {
			ParameterOrder: []string{"account"},
			Parameters:     map[string]string{"account": "Address"},
		},
		"block": {
			ParameterOrder: []string{},
			Parameters:     map[string]string{},
		},
		"emulatorFoo": {
			ParameterOrder: []string{"account"},
			Parameters:     map[string]string{"account": "Address"},
		},
		"mainnetFoo": {
			ParameterOrder: []string{"account"},
			Parameters:     map[string]string{"account": "Address"},
		},
		"mainnetaScript": {
			ParameterOrder: []string{"account"},
			Parameters:     map[string]string{"account": "Address"},
		},
		"mainnetzScript": {
			ParameterOrder: []string{"account"},
			Parameters:     map[string]string{"account": "Address"},
		},
		"test": {
			ParameterOrder: []string{"account"},
			Parameters:     map[string]string{"account": "Address"},
		},
		"testnetFoo": {
			ParameterOrder: []string{"account"},
			Parameters:     map[string]string{"account": "Address"},
		},
		"type": {
			ParameterOrder: []string{},
			Parameters:     map[string]string{},
		},
		"zScript": {
			ParameterOrder: []string{"account"},
			Parameters:     map[string]string{"account": "Address"},
		},
	},
	Networks: map[string]*overflow.OverflowSolutionNetwork{
		"emulator": {
			Scripts: map[string]string{
				"aScript": `import FungibleToken from 0xee82856bf20e2aa6
// This is a generic script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"block": `// test script to ensure code is running
access(all) fun main(): UInt64 {
    let height = getCurrentBlock().height
    log(height)
    return height
}`,
				"emulatorFoo": `// test script to ensure code is running
import NonFungibleToken from 0xf8d6e0586b0a20c7

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"mainnetFoo": `// test script to ensure code is running
import NonFungibleToken from 0xf8d6e0586b0a20c7

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"mainnetaScript": `import FungibleToken from 0xee82856bf20e2aa6
// This is a mainnet specific script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"mainnetzScript": `import FungibleToken from 0xee82856bf20e2aa6
// This is a mainnet specific script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"test": `// test script to ensure code is running
import NonFungibleToken from 0xf8d6e0586b0a20c7

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"testnetFoo": `// test script to ensure code is running
import NonFungibleToken from 0xf8d6e0586b0a20c7

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"type": `// test script to ensure code is running
import FlowToken from 0x0ae53cb6e3f42a79

access(all) fun main(): Type {
    return Type<@FlowToken.Vault>()
}`,
				"zScript": `import FungibleToken from 0xee82856bf20e2aa6
// This is a generic script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
			},
			Transactions: map[string]string{
				"aTransaction": `import FungibleToken from 0xee82856bf20e2aa6

transaction() {
  // This is a generic transaction
}`,
				"arguments": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: auth(Storage) &Account) {
        log(acct)
        log(test)

    }
}`,
				"argumentsWithAccount": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:Address) {
    prepare(acct: &Account) {
        log("signer")
        log(acct)
        log("argument")
        log(test)
    }
}`,
				"create_nft_collection": `// This transaction creates an empty NFT Collection in the signer's account
transaction {
    prepare(acct: auth(Storage) &Account) {
    }
}`,
				"emulatorFoo": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: auth(BorrowValue) &Account) {
        log(acct)
        log(test)

    }
}`,
				"mainnetFoo": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: &Account) {
        log(acct)
        log(test)

    }
}`,
				"mainnetaTransaction": `import FungibleToken from 0xee82856bf20e2aa6

transaction() {
  // This is a mainnet specific transaction
}`,
				"mainnetzTransaction": `import FungibleToken from 0xee82856bf20e2aa6

transaction() {
  // This is a mainnet specific transaction
}`,
				"mint_tokens": `import FungibleToken from 0xee82856bf20e2aa6
import FlowToken from 0x0ae53cb6e3f42a79


transaction(recipient: Address, amount: UFix64) {
    let tokenAdmin: &FlowToken.Administrator
    let tokenReceiver: &{FungibleToken.Receiver}

    prepare(signer: auth(BorrowValue) &Account) {
        self.tokenAdmin = signer.storage.borrow<&FlowToken.Administrator>(from: /storage/flowTokenAdmin)
        ?? panic("Signer is not the token admin")

        self.tokenReceiver = getAccount(recipient).capabilities.borrow<&{FungibleToken.Receiver}>(/public/flowTokenReceiver) ?? panic("Unable to borrow receiver reference")
    }

    execute {
        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)
        let mintedVault <- minter.mintTokens(amount: amount)

        self.tokenReceiver.deposit(from: <-mintedVault)

        destroy minter
    }
}`,
				"signWithMultipleAccounts": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: &Account, account2: &Account) {
        log(acct)
        log(account2)
    }
}`,
				"testnetFoo": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: auth(Storage) &Account) {
        log(acct)
        log(test)

    }
}`,
				"zTransaction": `import FungibleToken from 0xee82856bf20e2aa6

transaction() {
  // This is a generic transaction
}`,
			},
			Contracts: &map[string]string{"Debug": `import NonFungibleToken from 0xf8d6e0586b0a20c7

access(all) contract Debug {

    access(all) struct FooListBar {
        access(all) let foo:[Foo2]
        access(all) let bar:String

        init(foo:[Foo2], bar:String) {
            self.foo=foo
            self.bar=bar
        }
    }
    access(all) struct FooBar {
        access(all) let foo:Foo
        access(all) let bar:String

        init(foo:Foo, bar:String) {
            self.foo=foo
            self.bar=bar
        }
    }


    access(all) struct Foo2{
        access(all) let bar: Address

        init(bar: Address) {
            self.bar=bar
        }
    }

    access(all) struct Foo{
        access(all) let bar: String

        init(bar: String) {
            self.bar=bar
        }
    }

    access(all) event Log(msg: String)
    access(all) event LogNum(id: UInt64)

    access(all) fun id(_ id:UInt64) {
        emit LogNum(id:id)
    }

    access(all) fun log(_ msg: String) : String {
        emit Log(msg: msg)
        return msg
    }

}`},
		},
		"mainnet": {
			Scripts: map[string]string{
				"aScript": `import FungibleToken from 0xf233dcee88fe0abe
// This is a generic script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"block": `// test script to ensure code is running
access(all) fun main(): UInt64 {
    let height = getCurrentBlock().height
    log(height)
    return height
}`,
				"emulatorFoo": `// test script to ensure code is running
import NonFungibleToken from 0x1d7e57aa55817448

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"mainnetFoo": `// test script to ensure code is running
import NonFungibleToken from 0x1d7e57aa55817448

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"mainnetaScript": `import FungibleToken from 0xf233dcee88fe0abe
// This is a mainnet specific script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"mainnetzScript": `import FungibleToken from 0xf233dcee88fe0abe
// This is a mainnet specific script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"test": `// test script to ensure code is running
import NonFungibleToken from 0x1d7e57aa55817448

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"testnetFoo": `// test script to ensure code is running
import NonFungibleToken from 0x1d7e57aa55817448

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"type": `// test script to ensure code is running
import FlowToken from 0x1654653399040a61

access(all) fun main(): Type {
    return Type<@FlowToken.Vault>()
}`,
				"zScript": `import FungibleToken from 0xf233dcee88fe0abe
// This is a generic script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
			},
			Transactions: map[string]string{
				"aTransaction": `import FungibleToken from 0xf233dcee88fe0abe

transaction() {
  // This is a generic transaction
}`,
				"arguments": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: auth(Storage) &Account) {
        log(acct)
        log(test)

    }
}`,
				"argumentsWithAccount": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:Address) {
    prepare(acct: &Account) {
        log("signer")
        log(acct)
        log("argument")
        log(test)
    }
}`,
				"create_nft_collection": `// This transaction creates an empty NFT Collection in the signer's account
transaction {
    prepare(acct: auth(Storage) &Account) {
    }
}`,
				"emulatorFoo": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: auth(BorrowValue) &Account) {
        log(acct)
        log(test)

    }
}`,
				"mainnetFoo": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: &Account) {
        log(acct)
        log(test)

    }
}`,
				"mainnetaTransaction": `import FungibleToken from 0xf233dcee88fe0abe

transaction() {
  // This is a mainnet specific transaction
}`,
				"mainnetzTransaction": `import FungibleToken from 0xf233dcee88fe0abe

transaction() {
  // This is a mainnet specific transaction
}`,
				"mint_tokens": `import FungibleToken from 0xee82856bf20e2aa6
import FlowToken from 0x0ae53cb6e3f42a79


transaction(recipient: Address, amount: UFix64) {
    let tokenAdmin: &FlowToken.Administrator
    let tokenReceiver: &{FungibleToken.Receiver}

    prepare(signer: auth(BorrowValue) &Account) {
        self.tokenAdmin = signer.storage.borrow<&FlowToken.Administrator>(from: /storage/flowTokenAdmin)
        ?? panic("Signer is not the token admin")

        self.tokenReceiver = getAccount(recipient).capabilities.borrow<&{FungibleToken.Receiver}>(/public/flowTokenReceiver) ?? panic("Unable to borrow receiver reference")
    }

    execute {
        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)
        let mintedVault <- minter.mintTokens(amount: amount)

        self.tokenReceiver.deposit(from: <-mintedVault)

        destroy minter
    }
}`,
				"signWithMultipleAccounts": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: &Account, account2: &Account) {
        log(acct)
        log(account2)
    }
}`,
				"testnetFoo": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: auth(Storage) &Account) {
        log(acct)
        log(test)

    }
}`,
				"zTransaction": `import FungibleToken from 0xf233dcee88fe0abe

transaction() {
  // This is a generic transaction
}`,
			},
			Contracts: &map[string]string{"Debug": `import NonFungibleToken from 0x1d7e57aa55817448

access(all) contract Debug {

    access(all) struct FooListBar {
        access(all) let foo:[Foo2]
        access(all) let bar:String

        init(foo:[Foo2], bar:String) {
            self.foo=foo
            self.bar=bar
        }
    }
    access(all) struct FooBar {
        access(all) let foo:Foo
        access(all) let bar:String

        init(foo:Foo, bar:String) {
            self.foo=foo
            self.bar=bar
        }
    }


    access(all) struct Foo2{
        access(all) let bar: Address

        init(bar: Address) {
            self.bar=bar
        }
    }

    access(all) struct Foo{
        access(all) let bar: String

        init(bar: String) {
            self.bar=bar
        }
    }

    access(all) event Log(msg: String)
    access(all) event LogNum(id: UInt64)

    access(all) fun id(_ id:UInt64) {
        emit LogNum(id:id)
    }

    access(all) fun log(_ msg: String) : String {
        emit Log(msg: msg)
        return msg
    }

}`},
		},
		"testnet": {
			Scripts: map[string]string{
				"aScript": `import FungibleToken from 0x9a0766d93b6608b7
// This is a generic script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"block": `// test script to ensure code is running
access(all) fun main(): UInt64 {
    let height = getCurrentBlock().height
    log(height)
    return height
}`,
				"emulatorFoo": `// test script to ensure code is running
import NonFungibleToken from 0x631e88ae7f1d7c20

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"mainnetFoo": `// test script to ensure code is running
import NonFungibleToken from 0x631e88ae7f1d7c20

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"mainnetaScript": `import FungibleToken from 0x9a0766d93b6608b7
// This is a mainnet specific script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"mainnetzScript": `import FungibleToken from 0x9a0766d93b6608b7
// This is a mainnet specific script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"test": `// test script to ensure code is running
import NonFungibleToken from 0x631e88ae7f1d7c20

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"testnetFoo": `// test script to ensure code is running
import NonFungibleToken from 0x631e88ae7f1d7c20

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"type": `// test script to ensure code is running
import FlowToken from 0x7e60df042a9c0868

access(all) fun main(): Type {
    return Type<@FlowToken.Vault>()
}`,
				"zScript": `import FungibleToken from 0x9a0766d93b6608b7
// This is a generic script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
			},
			Transactions: map[string]string{
				"aTransaction": `import FungibleToken from 0x9a0766d93b6608b7

transaction() {
  // This is a generic transaction
}`,
				"arguments": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: auth(Storage) &Account) {
        log(acct)
        log(test)

    }
}`,
				"argumentsWithAccount": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:Address) {
    prepare(acct: &Account) {
        log("signer")
        log(acct)
        log("argument")
        log(test)
    }
}`,
				"create_nft_collection": `// This transaction creates an empty NFT Collection in the signer's account
transaction {
    prepare(acct: auth(Storage) &Account) {
    }
}`,
				"emulatorFoo": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: auth(BorrowValue) &Account) {
        log(acct)
        log(test)

    }
}`,
				"mainnetFoo": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: &Account) {
        log(acct)
        log(test)

    }
}`,
				"mainnetaTransaction": `import FungibleToken from 0x9a0766d93b6608b7

transaction() {
  // This is a mainnet specific transaction
}`,
				"mainnetzTransaction": `import FungibleToken from 0x9a0766d93b6608b7

transaction() {
  // This is a mainnet specific transaction
}`,
				"mint_tokens": `import FungibleToken from 0xee82856bf20e2aa6
import FlowToken from 0x0ae53cb6e3f42a79


transaction(recipient: Address, amount: UFix64) {
    let tokenAdmin: &FlowToken.Administrator
    let tokenReceiver: &{FungibleToken.Receiver}

    prepare(signer: auth(BorrowValue) &Account) {
        self.tokenAdmin = signer.storage.borrow<&FlowToken.Administrator>(from: /storage/flowTokenAdmin)
        ?? panic("Signer is not the token admin")

        self.tokenReceiver = getAccount(recipient).capabilities.borrow<&{FungibleToken.Receiver}>(/public/flowTokenReceiver) ?? panic("Unable to borrow receiver reference")
    }

    execute {
        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)
        let mintedVault <- minter.mintTokens(amount: amount)

        self.tokenReceiver.deposit(from: <-mintedVault)

        destroy minter
    }
}`,
				"signWithMultipleAccounts": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: &Account, account2: &Account) {
        log(acct)
        log(account2)
    }
}`,
				"testnetFoo": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: auth(Storage) &Account) {
        log(acct)
        log(test)

    }
}`,
				"zTransaction": `import FungibleToken from 0x9a0766d93b6608b7

transaction() {
  // This is a generic transaction
}`,
			},
			Contracts: &map[string]string{"Debug": `import NonFungibleToken from 0x631e88ae7f1d7c20

access(all) contract Debug {

    access(all) struct FooListBar {
        access(all) let foo:[Foo2]
        access(all) let bar:String

        init(foo:[Foo2], bar:String) {
            self.foo=foo
            self.bar=bar
        }
    }
    access(all) struct FooBar {
        access(all) let foo:Foo
        access(all) let bar:String

        init(foo:Foo, bar:String) {
            self.foo=foo
            self.bar=bar
        }
    }


    access(all) struct Foo2{
        access(all) let bar: Address

        init(bar: Address) {
            self.bar=bar
        }
    }

    access(all) struct Foo{
        access(all) let bar: String

        init(bar: String) {
            self.bar=bar
        }
    }

    access(all) event Log(msg: String)
    access(all) event LogNum(id: UInt64)

    access(all) fun id(_ id:UInt64) {
        emit LogNum(id:id)
    }

    access(all) fun log(_ msg: String) : String {
        emit Log(msg: msg)
        return msg
    }

}`},
		},
	},
	Warnings: []string{},
}
