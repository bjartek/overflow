&overflow.OverflowSolutionMerged{Networks: map[string]overflow.OverflowSolutionMergedNetwork{
	"emulator": {
		Scripts: map[string]overflow.OverflowCodeWithSpec{
			"Foo": {
				Code: `// test script to ensure code is running
import NonFungibleToken from 0xf8d6e0586b0a20c7

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{
						"account",
					},
					Parameters: map[string]string{"account": "Address"},
				},
			},
			"aScript": {
				Code: `import FungibleToken from 0xee82856bf20e2aa6
// This is a generic script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{
						"account",
					},
					Parameters: map[string]string{"account": "Address"},
				},
			},
			"block": {
				Code: `// test script to ensure code is running
access(all) fun main(): UInt64 {
    let height = getCurrentBlock().height
    log(height)
    return height
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{},
					Parameters:     map[string]string{},
				},
			},
			"test": {
				Code: `// test script to ensure code is running
import NonFungibleToken from 0xf8d6e0586b0a20c7

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{
						"account",
					},
					Parameters: map[string]string{"account": "Address"},
				},
			},
			"type": {
				Code: `// test script to ensure code is running
import FlowToken from 0x0ae53cb6e3f42a79

access(all) fun main(): Type {
    return Type<@FlowToken.Vault>()
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{},
					Parameters:     map[string]string{},
				},
			},
			"zScript": {
				Code: `import FungibleToken from 0xee82856bf20e2aa6
// This is a generic script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{
						"account",
					},
					Parameters: map[string]string{"account": "Address"},
				},
			},
		},
		Transactions: map[string]overflow.OverflowCodeWithSpec{
			"Foo": {
				Code: `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: auth(BorrowValue) &Account) {
        log(acct)
        log(test)

    }
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{
						"test",
					},
					Parameters: map[string]string{"test": "String"},
				},
			},
			"aTransaction": {
				Code: `import FungibleToken from 0xee82856bf20e2aa6

transaction() {
  // This is a generic transaction
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{},
					Parameters:     map[string]string{},
				},
			},
			"arguments": {
				Code: `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: auth(Storage) &Account) {
        log(acct)
        log(test)

    }
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{
						"test",
					},
					Parameters: map[string]string{"test": "String"},
				},
			},
			"argumentsWithAccount": {
				Code: `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:Address) {
    prepare(acct: &Account) {
        log("signer")
        log(acct)
        log("argument")
        log(test)
    }
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{
						"test",
					},
					Parameters: map[string]string{"test": "Address"},
				},
			},
			"create_nft_collection": {
				Code: `// This transaction creates an empty NFT Collection in the signer's account
transaction {
    prepare(acct: auth(Storage) &Account) {
    }
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{},
					Parameters:     map[string]string{},
				},
			},
			"mint_tokens": {
				Code: `import FungibleToken from 0xee82856bf20e2aa6
import FlowToken from 0x0ae53cb6e3f42a79


transaction(recipient: Address, amount: UFix64) {
    let tokenAdmin: &FlowToken.Administrator
    let tokenReceiver: &{FungibleToken.Receiver}

    prepare(signer: auth(BorrowValue) &Account) {
        self.tokenAdmin = signer.storage.borrow<&FlowToken.Administrator>(from: /storage/flowTokenAdmin)
        ?? panic("Signer is not the token admin")

        self.tokenReceiver = getAccount(recipient).capabilities.borrow<&{FungibleToken.Receiver}>(/public/flowTokenReceiver) ?? panic("Unable to borrow receiver reference")
    }

    execute {
        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)
        let mintedVault <- minter.mintTokens(amount: amount)

        self.tokenReceiver.deposit(from: <-mintedVault)

        destroy minter
    }
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{
						"recipient",
						"amount",
					},
					Parameters: map[string]string{
						"amount":    "UFix64",
						"recipient": "Address",
					},
				},
			},
			"signWithMultipleAccounts": {
				Code: `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: &Account, account2: &Account) {
        log(acct)
        log(account2)
    }
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{
						"test",
					},
					Parameters: map[string]string{"test": "String"},
				},
			},
			"zTransaction": {
				Code: `import FungibleToken from 0xee82856bf20e2aa6

transaction() {
  // This is a generic transaction
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{},
					Parameters:     map[string]string{},
				},
			},
		},
		Contracts: &map[string]string{"Debug": `import NonFungibleToken from 0xf8d6e0586b0a20c7

access(all) contract Debug {

    access(all) struct FooListBar {
        access(all) let foo:[Foo2]
        access(all) let bar:String

        init(foo:[Foo2], bar:String) {
            self.foo=foo
            self.bar=bar
        }
    }
    access(all) struct FooBar {
        access(all) let foo:Foo
        access(all) let bar:String

        init(foo:Foo, bar:String) {
            self.foo=foo
            self.bar=bar
        }
    }


    access(all) struct Foo2{
        access(all) let bar: Address

        init(bar: Address) {
            self.bar=bar
        }
    }

    access(all) struct Foo{
        access(all) let bar: String

        init(bar: String) {
            self.bar=bar
        }
    }

    access(all) event Log(msg: String)
    access(all) event LogNum(id: UInt64)

    access(all) fun id(_ id:UInt64) {
        emit LogNum(id:id)
    }

    access(all) fun log(_ msg: String) : String {
        emit Log(msg: msg)
        return msg
    }

}`},
	},
	"mainnet": {
		Scripts: map[string]overflow.OverflowCodeWithSpec{
			"Foo": {
				Code: `// test script to ensure code is running
import NonFungibleToken from 0x1d7e57aa55817448

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{
						"account",
					},
					Parameters: map[string]string{"account": "Address"},
				},
			},
			"aScript": {
				Code: `import FungibleToken from 0xf233dcee88fe0abe
// This is a mainnet specific script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{
						"account",
					},
					Parameters: map[string]string{"account": "Address"},
				},
			},
			"block": {
				Code: `// test script to ensure code is running
access(all) fun main(): UInt64 {
    let height = getCurrentBlock().height
    log(height)
    return height
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{},
					Parameters:     map[string]string{},
				},
			},
			"test": {
				Code: `// test script to ensure code is running
import NonFungibleToken from 0x1d7e57aa55817448

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{
						"account",
					},
					Parameters: map[string]string{"account": "Address"},
				},
			},
			"type": {
				Code: `// test script to ensure code is running
import FlowToken from 0x1654653399040a61

access(all) fun main(): Type {
    return Type<@FlowToken.Vault>()
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{},
					Parameters:     map[string]string{},
				},
			},
			"zScript": {
				Code: `import FungibleToken from 0xf233dcee88fe0abe
// This is a mainnet specific script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{
						"account",
					},
					Parameters: map[string]string{"account": "Address"},
				},
			},
		},
		Transactions: map[string]overflow.OverflowCodeWithSpec{
			"Foo": {
				Code: `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: &Account) {
        log(acct)
        log(test)

    }
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{
						"test",
					},
					Parameters: map[string]string{"test": "String"},
				},
			},
			"aTransaction": {
				Code: `import FungibleToken from 0xf233dcee88fe0abe

transaction() {
  // This is a mainnet specific transaction
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{},
					Parameters:     map[string]string{},
				},
			},
			"arguments": {
				Code: `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: auth(Storage) &Account) {
        log(acct)
        log(test)

    }
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{
						"test",
					},
					Parameters: map[string]string{"test": "String"},
				},
			},
			"argumentsWithAccount": {
				Code: `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:Address) {
    prepare(acct: &Account) {
        log("signer")
        log(acct)
        log("argument")
        log(test)
    }
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{
						"test",
					},
					Parameters: map[string]string{"test": "Address"},
				},
			},
			"create_nft_collection": {
				Code: `// This transaction creates an empty NFT Collection in the signer's account
transaction {
    prepare(acct: auth(Storage) &Account) {
    }
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{},
					Parameters:     map[string]string{},
				},
			},
			"mint_tokens": {
				Code: `import FungibleToken from 0xee82856bf20e2aa6
import FlowToken from 0x0ae53cb6e3f42a79


transaction(recipient: Address, amount: UFix64) {
    let tokenAdmin: &FlowToken.Administrator
    let tokenReceiver: &{FungibleToken.Receiver}

    prepare(signer: auth(BorrowValue) &Account) {
        self.tokenAdmin = signer.storage.borrow<&FlowToken.Administrator>(from: /storage/flowTokenAdmin)
        ?? panic("Signer is not the token admin")

        self.tokenReceiver = getAccount(recipient).capabilities.borrow<&{FungibleToken.Receiver}>(/public/flowTokenReceiver) ?? panic("Unable to borrow receiver reference")
    }

    execute {
        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)
        let mintedVault <- minter.mintTokens(amount: amount)

        self.tokenReceiver.deposit(from: <-mintedVault)

        destroy minter
    }
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{
						"recipient",
						"amount",
					},
					Parameters: map[string]string{
						"amount":    "UFix64",
						"recipient": "Address",
					},
				},
			},
			"signWithMultipleAccounts": {
				Code: `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: &Account, account2: &Account) {
        log(acct)
        log(account2)
    }
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{
						"test",
					},
					Parameters: map[string]string{"test": "String"},
				},
			},
			"zTransaction": {
				Code: `import FungibleToken from 0xf233dcee88fe0abe

transaction() {
  // This is a mainnet specific transaction
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{},
					Parameters:     map[string]string{},
				},
			},
		},
		Contracts: &map[string]string{"Debug": `import NonFungibleToken from 0x1d7e57aa55817448

access(all) contract Debug {

    access(all) struct FooListBar {
        access(all) let foo:[Foo2]
        access(all) let bar:String

        init(foo:[Foo2], bar:String) {
            self.foo=foo
            self.bar=bar
        }
    }
    access(all) struct FooBar {
        access(all) let foo:Foo
        access(all) let bar:String

        init(foo:Foo, bar:String) {
            self.foo=foo
            self.bar=bar
        }
    }


    access(all) struct Foo2{
        access(all) let bar: Address

        init(bar: Address) {
            self.bar=bar
        }
    }

    access(all) struct Foo{
        access(all) let bar: String

        init(bar: String) {
            self.bar=bar
        }
    }

    access(all) event Log(msg: String)
    access(all) event LogNum(id: UInt64)

    access(all) fun id(_ id:UInt64) {
        emit LogNum(id:id)
    }

    access(all) fun log(_ msg: String) : String {
        emit Log(msg: msg)
        return msg
    }

}`},
	},
	"testnet": {
		Scripts: map[string]overflow.OverflowCodeWithSpec{
			"Foo": {
				Code: `// test script to ensure code is running
import NonFungibleToken from 0x631e88ae7f1d7c20

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{
						"account",
					},
					Parameters: map[string]string{"account": "Address"},
				},
			},
			"aScript": {
				Code: `import FungibleToken from 0x9a0766d93b6608b7
// This is a generic script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{
						"account",
					},
					Parameters: map[string]string{"account": "Address"},
				},
			},
			"block": {
				Code: `// test script to ensure code is running
access(all) fun main(): UInt64 {
    let height = getCurrentBlock().height
    log(height)
    return height
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{},
					Parameters:     map[string]string{},
				},
			},
			"test": {
				Code: `// test script to ensure code is running
import NonFungibleToken from 0x631e88ae7f1d7c20

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{
						"account",
					},
					Parameters: map[string]string{"account": "Address"},
				},
			},
			"type": {
				Code: `// test script to ensure code is running
import FlowToken from 0x7e60df042a9c0868

access(all) fun main(): Type {
    return Type<@FlowToken.Vault>()
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{},
					Parameters:     map[string]string{},
				},
			},
			"zScript": {
				Code: `import FungibleToken from 0x9a0766d93b6608b7
// This is a generic script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{
						"account",
					},
					Parameters: map[string]string{"account": "Address"},
				},
			},
		},
		Transactions: map[string]overflow.OverflowCodeWithSpec{
			"Foo": {
				Code: `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: auth(Storage) &Account) {
        log(acct)
        log(test)

    }
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{
						"test",
					},
					Parameters: map[string]string{"test": "String"},
				},
			},
			"aTransaction": {
				Code: `import FungibleToken from 0x9a0766d93b6608b7

transaction() {
  // This is a generic transaction
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{},
					Parameters:     map[string]string{},
				},
			},
			"arguments": {
				Code: `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: auth(Storage) &Account) {
        log(acct)
        log(test)

    }
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{
						"test",
					},
					Parameters: map[string]string{"test": "String"},
				},
			},
			"argumentsWithAccount": {
				Code: `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:Address) {
    prepare(acct: &Account) {
        log("signer")
        log(acct)
        log("argument")
        log(test)
    }
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{
						"test",
					},
					Parameters: map[string]string{"test": "Address"},
				},
			},
			"create_nft_collection": {
				Code: `// This transaction creates an empty NFT Collection in the signer's account
transaction {
    prepare(acct: auth(Storage) &Account) {
    }
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{},
					Parameters:     map[string]string{},
				},
			},
			"mint_tokens": {
				Code: `import FungibleToken from 0xee82856bf20e2aa6
import FlowToken from 0x0ae53cb6e3f42a79


transaction(recipient: Address, amount: UFix64) {
    let tokenAdmin: &FlowToken.Administrator
    let tokenReceiver: &{FungibleToken.Receiver}

    prepare(signer: auth(BorrowValue) &Account) {
        self.tokenAdmin = signer.storage.borrow<&FlowToken.Administrator>(from: /storage/flowTokenAdmin)
        ?? panic("Signer is not the token admin")

        self.tokenReceiver = getAccount(recipient).capabilities.borrow<&{FungibleToken.Receiver}>(/public/flowTokenReceiver) ?? panic("Unable to borrow receiver reference")
    }

    execute {
        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)
        let mintedVault <- minter.mintTokens(amount: amount)

        self.tokenReceiver.deposit(from: <-mintedVault)

        destroy minter
    }
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{
						"recipient",
						"amount",
					},
					Parameters: map[string]string{
						"amount":    "UFix64",
						"recipient": "Address",
					},
				},
			},
			"signWithMultipleAccounts": {
				Code: `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: &Account, account2: &Account) {
        log(acct)
        log(account2)
    }
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{
						"test",
					},
					Parameters: map[string]string{"test": "String"},
				},
			},
			"zTransaction": {
				Code: `import FungibleToken from 0x9a0766d93b6608b7

transaction() {
  // This is a generic transaction
}`,
				Spec: &overflow.OverflowDeclarationInfo{
					ParameterOrder: []string{},
					Parameters:     map[string]string{},
				},
			},
		},
		Contracts: &map[string]string{"Debug": `import NonFungibleToken from 0x631e88ae7f1d7c20

access(all) contract Debug {

    access(all) struct FooListBar {
        access(all) let foo:[Foo2]
        access(all) let bar:String

        init(foo:[Foo2], bar:String) {
            self.foo=foo
            self.bar=bar
        }
    }
    access(all) struct FooBar {
        access(all) let foo:Foo
        access(all) let bar:String

        init(foo:Foo, bar:String) {
            self.foo=foo
            self.bar=bar
        }
    }


    access(all) struct Foo2{
        access(all) let bar: Address

        init(bar: Address) {
            self.bar=bar
        }
    }

    access(all) struct Foo{
        access(all) let bar: String

        init(bar: String) {
            self.bar=bar
        }
    }

    access(all) event Log(msg: String)
    access(all) event LogNum(id: UInt64)

    access(all) fun id(_ id:UInt64) {
        emit LogNum(id:id)
    }

    access(all) fun log(_ msg: String) : String {
        emit Log(msg: msg)
        return msg
    }

}`},
	},
}}
