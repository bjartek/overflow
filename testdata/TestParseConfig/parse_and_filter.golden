&overflow.OverflowSolution{
	Transactions: map[string]*overflow.OverflowDeclarationInfo{
		"aTransaction": {
			Parameters:     map[string]string{},
			Authorizers:    overflow.OverflowAuthorizers{},
			ParameterOrder: []string{},
		},
		"create_nft_collection": {
			Parameters: map[string]string{},
			Authorizers: overflow.OverflowAuthorizers{overflow.OverflowAuthorizer{
				Name: "acct",
				Entitlements: []string{
					"Storage",
				},
			}},
			ParameterOrder: []string{},
		},
		"emulatorFoo": {
			Parameters: map[string]string{"test": "String"},
			Authorizers: overflow.OverflowAuthorizers{overflow.OverflowAuthorizer{
				Name:         "acct",
				Entitlements: []string{"BorrowValue"},
			}},
			ParameterOrder: []string{"test"},
		},
		"mainnetFoo": {
			Parameters: map[string]string{"test": "String"},
			Authorizers: overflow.OverflowAuthorizers{overflow.OverflowAuthorizer{
				Name:         "acct",
				Entitlements: []string{},
			}},
			ParameterOrder: []string{"test"},
		},
		"mainnetaTransaction": {
			Parameters:     map[string]string{},
			Authorizers:    overflow.OverflowAuthorizers{},
			ParameterOrder: []string{},
		},
		"mainnetzTransaction": {
			Parameters:     map[string]string{},
			Authorizers:    overflow.OverflowAuthorizers{},
			ParameterOrder: []string{},
		},
		"mint_tokens": {
			Parameters: map[string]string{
				"amount":    "UFix64",
				"recipient": "Address",
			},
			Authorizers: overflow.OverflowAuthorizers{overflow.OverflowAuthorizer{
				Name:         "signer",
				Entitlements: []string{"BorrowValue"},
			}},
			ParameterOrder: []string{
				"recipient",
				"amount",
			},
		},
		"sendFlow": {
			Parameters: map[string]string{
				"amount": "UFix64",
				"to":     "Address",
			},
			Authorizers: overflow.OverflowAuthorizers{overflow.OverflowAuthorizer{
				Name:         "signer",
				Entitlements: []string{"BorrowValue"},
			}},
			ParameterOrder: []string{
				"amount",
				"to",
			},
		},
		"signWithMultipleAccounts": {
			Parameters: map[string]string{"test": "String"},
			Authorizers: overflow.OverflowAuthorizers{
				overflow.OverflowAuthorizer{
					Name:         "acct",
					Entitlements: []string{},
				},
				overflow.OverflowAuthorizer{
					Name:         "account2",
					Entitlements: []string{},
				},
			},
			ParameterOrder: []string{"test"},
		},
		"testnetFoo": {
			Parameters: map[string]string{"test": "String"},
			Authorizers: overflow.OverflowAuthorizers{overflow.OverflowAuthorizer{
				Name:         "acct",
				Entitlements: []string{"Storage"},
			}},
			ParameterOrder: []string{"test"},
		},
		"zTransaction": {
			Parameters:     map[string]string{},
			Authorizers:    overflow.OverflowAuthorizers{},
			ParameterOrder: []string{},
		},
	},
	Scripts: map[string]*overflow.OverflowDeclarationInfo{
		"aScript": {
			Parameters:     map[string]string{"account": "Address"},
			ParameterOrder: []string{"account"},
		},
		"block": {
			Parameters:     map[string]string{},
			ParameterOrder: []string{},
		},
		"emulatorFoo": {
			Parameters:     map[string]string{"account": "Address"},
			ParameterOrder: []string{"account"},
		},
		"mainnetFoo": {
			Parameters:     map[string]string{"account": "Address"},
			ParameterOrder: []string{"account"},
		},
		"mainnetaScript": {
			Parameters:     map[string]string{"account": "Address"},
			ParameterOrder: []string{"account"},
		},
		"mainnetzScript": {
			Parameters:     map[string]string{"account": "Address"},
			ParameterOrder: []string{"account"},
		},
		"test": {
			Parameters:     map[string]string{"account": "Address"},
			ParameterOrder: []string{"account"},
		},
		"testnetFoo": {
			Parameters:     map[string]string{"account": "Address"},
			ParameterOrder: []string{"account"},
		},
		"type": {
			Parameters:     map[string]string{},
			ParameterOrder: []string{},
		},
		"zScript": {
			Parameters:     map[string]string{"account": "Address"},
			ParameterOrder: []string{"account"},
		},
	},
	Networks: map[string]*overflow.OverflowSolutionNetwork{
		"emulator": {
			Scripts: map[string]string{
				"aScript": `import FungibleToken from 0xee82856bf20e2aa6
// This is a generic script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"block": `// test script to ensure code is running
access(all) fun main(): UInt64 {
    let height = getCurrentBlock().height
    log(height)
    return height
}`,
				"emulatorFoo": `// test script to ensure code is running
import NonFungibleToken from 0xf8d6e0586b0a20c7

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"mainnetFoo": `// test script to ensure code is running
import NonFungibleToken from 0xf8d6e0586b0a20c7

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"mainnetaScript": `import FungibleToken from 0xee82856bf20e2aa6
// This is a mainnet specific script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"mainnetzScript": `import FungibleToken from 0xee82856bf20e2aa6
// This is a mainnet specific script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"test": `// test script to ensure code is running
import NonFungibleToken from 0xf8d6e0586b0a20c7

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"testnetFoo": `// test script to ensure code is running
import NonFungibleToken from 0xf8d6e0586b0a20c7

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"type": `// test script to ensure code is running
import FlowToken from 0x0ae53cb6e3f42a79

access(all) fun main(): Type {
    return Type<@FlowToken.Vault>()
}`,
				"zScript": `import FungibleToken from 0xee82856bf20e2aa6
// This is a generic script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
			},
			Transactions: map[string]string{
				"aTransaction": `import FungibleToken from 0xee82856bf20e2aa6

transaction() {
  // This is a generic transaction
}`,
				"create_nft_collection": `// This transaction creates an empty NFT Collection in the signer's account
transaction {
    prepare(acct: auth(Storage) &Account) {
    }
}`,
				"emulatorFoo": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: auth(BorrowValue) &Account) {
        log(acct)
        log(test)

    }
}`,
				"mainnetFoo": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: &Account) {
        log(acct)
        log(test)

    }
}`,
				"mainnetaTransaction": `import FungibleToken from 0xee82856bf20e2aa6

transaction() {
  // This is a mainnet specific transaction
}`,
				"mainnetzTransaction": `import FungibleToken from 0xee82856bf20e2aa6

transaction() {
  // This is a mainnet specific transaction
}`,
				"mint_tokens": `import FungibleToken from 0xee82856bf20e2aa6
import FlowToken from 0x0ae53cb6e3f42a79


transaction(recipient: Address, amount: UFix64) {
    let tokenAdmin: &FlowToken.Administrator
    let tokenReceiver: &{FungibleToken.Receiver}

    prepare(signer: auth(BorrowValue) &Account) {
        self.tokenAdmin = signer.storage.borrow<&FlowToken.Administrator>(from: /storage/flowTokenAdmin)
        ?? panic("Signer is not the token admin")

        self.tokenReceiver = getAccount(recipient).capabilities.borrow<&{FungibleToken.Receiver}>(/public/flowTokenReceiver) ?? panic("Unable to borrow receiver reference")
    }

    execute {
        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)
        let mintedVault <- minter.mintTokens(amount: amount)

        self.tokenReceiver.deposit(from: <-mintedVault)

        destroy minter
    }
}`,
				"sendFlow": `import FungibleToken from 0xee82856bf20e2aa6

transaction(amount: UFix64, to: Address) {

    let vault: @{FungibleToken.Vault}

    prepare(signer: auth(BorrowValue) &Account) {
        let vaultRef = signer.storage.borrow<auth(FungibleToken.Withdraw) &{FungibleToken.Vault}>(from: /storage/flowTokenVault)
        ?? panic("Could not borrow reference to the owner's Vault!")

        self.vault <- vaultRef.withdraw(amount:amount)

    }
    execute {
        // Get the recipient's public account object
        let recipient = getAccount(to)

        // Get a reference to the recipient's Receiver
        let receiverRef = recipient.capabilities.borrow<&{FungibleToken.Receiver}>(/public/flowTokenReceiver)
        ?? panic("Could not borrow receiver reference to the recipient's Vault")

        receiverRef.deposit(from: <-self.vault)
        // Deposit the withdrawn tokens in the recipient's receiver
    }
}`,
				"signWithMultipleAccounts": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: &Account, account2: &Account) {
        log(acct)
        log(account2)
    }
}`,
				"testnetFoo": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: auth(Storage) &Account) {
        log(acct)
        log(test)

    }
}`,
				"zTransaction": `import FungibleToken from 0xee82856bf20e2aa6

transaction() {
  // This is a generic transaction
}`,
			},
		},
		"mainnet": {
			Scripts: map[string]string{
				"aScript": `import FungibleToken from 0xf233dcee88fe0abe
// This is a generic script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"block": `// test script to ensure code is running
access(all) fun main(): UInt64 {
    let height = getCurrentBlock().height
    log(height)
    return height
}`,
				"emulatorFoo": `// test script to ensure code is running
import NonFungibleToken from 0x1d7e57aa55817448

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"mainnetFoo": `// test script to ensure code is running
import NonFungibleToken from 0x1d7e57aa55817448

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"mainnetaScript": `import FungibleToken from 0xf233dcee88fe0abe
// This is a mainnet specific script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"mainnetzScript": `import FungibleToken from 0xf233dcee88fe0abe
// This is a mainnet specific script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"test": `// test script to ensure code is running
import NonFungibleToken from 0x1d7e57aa55817448

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"testnetFoo": `// test script to ensure code is running
import NonFungibleToken from 0x1d7e57aa55817448

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"type": `// test script to ensure code is running
import FlowToken from 0x1654653399040a61

access(all) fun main(): Type {
    return Type<@FlowToken.Vault>()
}`,
				"zScript": `import FungibleToken from 0xf233dcee88fe0abe
// This is a generic script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
			},
			Transactions: map[string]string{
				"aTransaction": `import FungibleToken from 0xf233dcee88fe0abe

transaction() {
  // This is a generic transaction
}`,
				"create_nft_collection": `// This transaction creates an empty NFT Collection in the signer's account
transaction {
    prepare(acct: auth(Storage) &Account) {
    }
}`,
				"emulatorFoo": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: auth(BorrowValue) &Account) {
        log(acct)
        log(test)

    }
}`,
				"mainnetFoo": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: &Account) {
        log(acct)
        log(test)

    }
}`,
				"mainnetaTransaction": `import FungibleToken from 0xf233dcee88fe0abe

transaction() {
  // This is a mainnet specific transaction
}`,
				"mainnetzTransaction": `import FungibleToken from 0xf233dcee88fe0abe

transaction() {
  // This is a mainnet specific transaction
}`,
				"mint_tokens": `import FungibleToken from 0xee82856bf20e2aa6
import FlowToken from 0x0ae53cb6e3f42a79


transaction(recipient: Address, amount: UFix64) {
    let tokenAdmin: &FlowToken.Administrator
    let tokenReceiver: &{FungibleToken.Receiver}

    prepare(signer: auth(BorrowValue) &Account) {
        self.tokenAdmin = signer.storage.borrow<&FlowToken.Administrator>(from: /storage/flowTokenAdmin)
        ?? panic("Signer is not the token admin")

        self.tokenReceiver = getAccount(recipient).capabilities.borrow<&{FungibleToken.Receiver}>(/public/flowTokenReceiver) ?? panic("Unable to borrow receiver reference")
    }

    execute {
        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)
        let mintedVault <- minter.mintTokens(amount: amount)

        self.tokenReceiver.deposit(from: <-mintedVault)

        destroy minter
    }
}`,
				"sendFlow": `import FungibleToken from 0xf233dcee88fe0abe

transaction(amount: UFix64, to: Address) {

    let vault: @{FungibleToken.Vault}

    prepare(signer: auth(BorrowValue) &Account) {
        let vaultRef = signer.storage.borrow<auth(FungibleToken.Withdraw) &{FungibleToken.Vault}>(from: /storage/flowTokenVault)
        ?? panic("Could not borrow reference to the owner's Vault!")

        self.vault <- vaultRef.withdraw(amount:amount)

    }
    execute {
        // Get the recipient's public account object
        let recipient = getAccount(to)

        // Get a reference to the recipient's Receiver
        let receiverRef = recipient.capabilities.borrow<&{FungibleToken.Receiver}>(/public/flowTokenReceiver)
        ?? panic("Could not borrow receiver reference to the recipient's Vault")

        receiverRef.deposit(from: <-self.vault)
        // Deposit the withdrawn tokens in the recipient's receiver
    }
}`,
				"signWithMultipleAccounts": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: &Account, account2: &Account) {
        log(acct)
        log(account2)
    }
}`,
				"testnetFoo": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: auth(Storage) &Account) {
        log(acct)
        log(test)

    }
}`,
				"zTransaction": `import FungibleToken from 0xf233dcee88fe0abe

transaction() {
  // This is a generic transaction
}`,
			},
		},
		"testnet": {
			Scripts: map[string]string{
				"aScript": `import FungibleToken from 0x9a0766d93b6608b7
// This is a generic script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"block": `// test script to ensure code is running
access(all) fun main(): UInt64 {
    let height = getCurrentBlock().height
    log(height)
    return height
}`,
				"emulatorFoo": `// test script to ensure code is running
import NonFungibleToken from 0x631e88ae7f1d7c20

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"mainnetFoo": `// test script to ensure code is running
import NonFungibleToken from 0x631e88ae7f1d7c20

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"mainnetaScript": `import FungibleToken from 0x9a0766d93b6608b7
// This is a mainnet specific script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"mainnetzScript": `import FungibleToken from 0x9a0766d93b6608b7
// This is a mainnet specific script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"test": `// test script to ensure code is running
import NonFungibleToken from 0x631e88ae7f1d7c20

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"testnetFoo": `// test script to ensure code is running
import NonFungibleToken from 0x631e88ae7f1d7c20

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				"type": `// test script to ensure code is running
import FlowToken from 0x7e60df042a9c0868

access(all) fun main(): Type {
    return Type<@FlowToken.Vault>()
}`,
				"zScript": `import FungibleToken from 0x9a0766d93b6608b7
// This is a generic script

access(all) fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
			},
			Transactions: map[string]string{
				"aTransaction": `import FungibleToken from 0x9a0766d93b6608b7

transaction() {
  // This is a generic transaction
}`,
				"create_nft_collection": `// This transaction creates an empty NFT Collection in the signer's account
transaction {
    prepare(acct: auth(Storage) &Account) {
    }
}`,
				"emulatorFoo": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: auth(BorrowValue) &Account) {
        log(acct)
        log(test)

    }
}`,
				"mainnetFoo": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: &Account) {
        log(acct)
        log(test)

    }
}`,
				"mainnetaTransaction": `import FungibleToken from 0x9a0766d93b6608b7

transaction() {
  // This is a mainnet specific transaction
}`,
				"mainnetzTransaction": `import FungibleToken from 0x9a0766d93b6608b7

transaction() {
  // This is a mainnet specific transaction
}`,
				"mint_tokens": `import FungibleToken from 0xee82856bf20e2aa6
import FlowToken from 0x0ae53cb6e3f42a79


transaction(recipient: Address, amount: UFix64) {
    let tokenAdmin: &FlowToken.Administrator
    let tokenReceiver: &{FungibleToken.Receiver}

    prepare(signer: auth(BorrowValue) &Account) {
        self.tokenAdmin = signer.storage.borrow<&FlowToken.Administrator>(from: /storage/flowTokenAdmin)
        ?? panic("Signer is not the token admin")

        self.tokenReceiver = getAccount(recipient).capabilities.borrow<&{FungibleToken.Receiver}>(/public/flowTokenReceiver) ?? panic("Unable to borrow receiver reference")
    }

    execute {
        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)
        let mintedVault <- minter.mintTokens(amount: amount)

        self.tokenReceiver.deposit(from: <-mintedVault)

        destroy minter
    }
}`,
				"sendFlow": `import FungibleToken from 0x9a0766d93b6608b7

transaction(amount: UFix64, to: Address) {

    let vault: @{FungibleToken.Vault}

    prepare(signer: auth(BorrowValue) &Account) {
        let vaultRef = signer.storage.borrow<auth(FungibleToken.Withdraw) &{FungibleToken.Vault}>(from: /storage/flowTokenVault)
        ?? panic("Could not borrow reference to the owner's Vault!")

        self.vault <- vaultRef.withdraw(amount:amount)

    }
    execute {
        // Get the recipient's public account object
        let recipient = getAccount(to)

        // Get a reference to the recipient's Receiver
        let receiverRef = recipient.capabilities.borrow<&{FungibleToken.Receiver}>(/public/flowTokenReceiver)
        ?? panic("Could not borrow receiver reference to the recipient's Vault")

        receiverRef.deposit(from: <-self.vault)
        // Deposit the withdrawn tokens in the recipient's receiver
    }
}`,
				"signWithMultipleAccounts": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: &Account, account2: &Account) {
        log(acct)
        log(account2)
    }
}`,
				"testnetFoo": `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
    prepare(acct: auth(Storage) &Account) {
        log(acct)
        log(test)

    }
}`,
				"zTransaction": `import FungibleToken from 0x9a0766d93b6608b7

transaction() {
  // This is a generic transaction
}`,
			},
		},
	},
	Warnings: []string{},
}
