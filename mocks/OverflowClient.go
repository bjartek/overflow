// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	flowkit "github.com/onflow/flow-cli/pkg/flowkit"
	flow "github.com/onflow/flow-go-sdk"

	mock "github.com/stretchr/testify/mock"

	overflow "github.com/bjartek/overflow"
)

// OverflowClient is an autogenerated mock type for the OverflowClient type
type OverflowClient struct {
	mock.Mock
}

// Account provides a mock function with given fields: key
func (_m *OverflowClient) Account(key string) *flowkit.Account {
	ret := _m.Called(key)

	var r0 *flowkit.Account
	if rf, ok := ret.Get(0).(func(string) *flowkit.Account); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flowkit.Account)
		}
	}

	return r0
}

// AccountE provides a mock function with given fields: key
func (_m *OverflowClient) AccountE(key string) (*flowkit.Account, error) {
	ret := _m.Called(key)

	var r0 *flowkit.Account
	if rf, ok := ret.Get(0).(func(string) *flowkit.Account); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flowkit.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Address provides a mock function with given fields: key
func (_m *OverflowClient) Address(key string) string {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FetchEventsWithResult provides a mock function with given fields: opts
func (_m *OverflowClient) FetchEventsWithResult(opts ...overflow.OverflowEventFetcherOption) overflow.EventFetcherResult {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 overflow.EventFetcherResult
	if rf, ok := ret.Get(0).(func(...overflow.OverflowEventFetcherOption) overflow.EventFetcherResult); ok {
		r0 = rf(opts...)
	} else {
		r0 = ret.Get(0).(overflow.EventFetcherResult)
	}

	return r0
}

// GetAccount provides a mock function with given fields: key
func (_m *OverflowClient) GetAccount(key string) (*flow.Account, error) {
	ret := _m.Called(key)

	var r0 *flow.Account
	if rf, ok := ret.Get(0).(func(string) *flow.Account); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockAtHeight provides a mock function with given fields: height
func (_m *OverflowClient) GetBlockAtHeight(height uint64) (*flow.Block, error) {
	ret := _m.Called(height)

	var r0 *flow.Block
	if rf, ok := ret.Get(0).(func(uint64) *flow.Block); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockById provides a mock function with given fields: blockId
func (_m *OverflowClient) GetBlockById(blockId string) (*flow.Block, error) {
	ret := _m.Called(blockId)

	var r0 *flow.Block
	if rf, ok := ret.Get(0).(func(string) *flow.Block); ok {
		r0 = rf(blockId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(blockId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestBlock provides a mock function with given fields:
func (_m *OverflowClient) GetLatestBlock() (*flow.Block, error) {
	ret := _m.Called()

	var r0 *flow.Block
	if rf, ok := ret.Get(0).(func() *flow.Block); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetwork provides a mock function with given fields:
func (_m *OverflowClient) GetNetwork() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// QualifiedIdentiferFromSnakeCase provides a mock function with given fields: typeName
func (_m *OverflowClient) QualifiedIdentiferFromSnakeCase(typeName string) (string, error) {
	ret := _m.Called(typeName)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(typeName)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(typeName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QualifiedIdentifier provides a mock function with given fields: contract, name
func (_m *OverflowClient) QualifiedIdentifier(contract string, name string) (string, error) {
	ret := _m.Called(contract, name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(contract, name)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(contract, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Script provides a mock function with given fields: filename, opts
func (_m *OverflowClient) Script(filename string, opts ...overflow.OverflowInteractionOption) *overflow.OverflowScriptResult {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filename)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *overflow.OverflowScriptResult
	if rf, ok := ret.Get(0).(func(string, ...overflow.OverflowInteractionOption) *overflow.OverflowScriptResult); ok {
		r0 = rf(filename, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*overflow.OverflowScriptResult)
		}
	}

	return r0
}

// ScriptFN provides a mock function with given fields: outerOpts
func (_m *OverflowClient) ScriptFN(outerOpts ...overflow.OverflowInteractionOption) overflow.OverflowScriptFunction {
	_va := make([]interface{}, len(outerOpts))
	for _i := range outerOpts {
		_va[_i] = outerOpts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 overflow.OverflowScriptFunction
	if rf, ok := ret.Get(0).(func(...overflow.OverflowInteractionOption) overflow.OverflowScriptFunction); ok {
		r0 = rf(outerOpts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(overflow.OverflowScriptFunction)
		}
	}

	return r0
}

// ScriptFileNameFN provides a mock function with given fields: filename, outerOpts
func (_m *OverflowClient) ScriptFileNameFN(filename string, outerOpts ...overflow.OverflowInteractionOption) overflow.OverflowScriptOptsFunction {
	_va := make([]interface{}, len(outerOpts))
	for _i := range outerOpts {
		_va[_i] = outerOpts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filename)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 overflow.OverflowScriptOptsFunction
	if rf, ok := ret.Get(0).(func(string, ...overflow.OverflowInteractionOption) overflow.OverflowScriptOptsFunction); ok {
		r0 = rf(filename, outerOpts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(overflow.OverflowScriptOptsFunction)
		}
	}

	return r0
}

// Tx provides a mock function with given fields: filename, opts
func (_m *OverflowClient) Tx(filename string, opts ...overflow.OverflowInteractionOption) *overflow.OverflowResult {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filename)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *overflow.OverflowResult
	if rf, ok := ret.Get(0).(func(string, ...overflow.OverflowInteractionOption) *overflow.OverflowResult); ok {
		r0 = rf(filename, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*overflow.OverflowResult)
		}
	}

	return r0
}

// TxFN provides a mock function with given fields: outerOpts
func (_m *OverflowClient) TxFN(outerOpts ...overflow.OverflowInteractionOption) overflow.OverflowTransactionFunction {
	_va := make([]interface{}, len(outerOpts))
	for _i := range outerOpts {
		_va[_i] = outerOpts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 overflow.OverflowTransactionFunction
	if rf, ok := ret.Get(0).(func(...overflow.OverflowInteractionOption) overflow.OverflowTransactionFunction); ok {
		r0 = rf(outerOpts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(overflow.OverflowTransactionFunction)
		}
	}

	return r0
}

// TxFileNameFN provides a mock function with given fields: filename, outerOpts
func (_m *OverflowClient) TxFileNameFN(filename string, outerOpts ...overflow.OverflowInteractionOption) overflow.OverflowTransactionOptsFunction {
	_va := make([]interface{}, len(outerOpts))
	for _i := range outerOpts {
		_va[_i] = outerOpts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filename)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 overflow.OverflowTransactionOptsFunction
	if rf, ok := ret.Get(0).(func(string, ...overflow.OverflowInteractionOption) overflow.OverflowTransactionOptsFunction); ok {
		r0 = rf(filename, outerOpts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(overflow.OverflowTransactionOptsFunction)
		}
	}

	return r0
}

type mockConstructorTestingTNewOverflowClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewOverflowClient creates a new instance of OverflowClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOverflowClient(t mockConstructorTestingTNewOverflowClient) *OverflowClient {
	mock := &OverflowClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
