// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	cadence "github.com/onflow/cadence"
	accounts "github.com/onflow/flow-cli/flowkit/accounts"

	context "context"

	flow "github.com/onflow/flow-go-sdk"

	mock "github.com/stretchr/testify/mock"

	overflow "github.com/bjartek/overflow"

	time "time"

	zap "go.uber.org/zap"
)

// OverflowBetaClient is an autogenerated mock type for the OverflowBetaClient type
type OverflowBetaClient struct {
	mock.Mock
}

type OverflowBetaClient_Expecter struct {
	mock *mock.Mock
}

func (_m *OverflowBetaClient) EXPECT() *OverflowBetaClient_Expecter {
	return &OverflowBetaClient_Expecter{mock: &_m.Mock}
}

// Account provides a mock function with given fields: key
func (_m *OverflowBetaClient) Account(key string) *accounts.Account {
	ret := _m.Called(key)

	var r0 *accounts.Account
	if rf, ok := ret.Get(0).(func(string) *accounts.Account); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounts.Account)
		}
	}

	return r0
}

// OverflowBetaClient_Account_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Account'
type OverflowBetaClient_Account_Call struct {
	*mock.Call
}

// Account is a helper method to define mock.On call
//   - key string
func (_e *OverflowBetaClient_Expecter) Account(key interface{}) *OverflowBetaClient_Account_Call {
	return &OverflowBetaClient_Account_Call{Call: _e.mock.On("Account", key)}
}

func (_c *OverflowBetaClient_Account_Call) Run(run func(key string)) *OverflowBetaClient_Account_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *OverflowBetaClient_Account_Call) Return(_a0 *accounts.Account) *OverflowBetaClient_Account_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OverflowBetaClient_Account_Call) RunAndReturn(run func(string) *accounts.Account) *OverflowBetaClient_Account_Call {
	_c.Call.Return(run)
	return _c
}

// AccountE provides a mock function with given fields: key
func (_m *OverflowBetaClient) AccountE(key string) (*accounts.Account, error) {
	ret := _m.Called(key)

	var r0 *accounts.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*accounts.Account, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) *accounts.Account); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounts.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OverflowBetaClient_AccountE_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccountE'
type OverflowBetaClient_AccountE_Call struct {
	*mock.Call
}

// AccountE is a helper method to define mock.On call
//   - key string
func (_e *OverflowBetaClient_Expecter) AccountE(key interface{}) *OverflowBetaClient_AccountE_Call {
	return &OverflowBetaClient_AccountE_Call{Call: _e.mock.On("AccountE", key)}
}

func (_c *OverflowBetaClient_AccountE_Call) Run(run func(key string)) *OverflowBetaClient_AccountE_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *OverflowBetaClient_AccountE_Call) Return(_a0 *accounts.Account, _a1 error) *OverflowBetaClient_AccountE_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OverflowBetaClient_AccountE_Call) RunAndReturn(run func(string) (*accounts.Account, error)) *OverflowBetaClient_AccountE_Call {
	_c.Call.Return(run)
	return _c
}

// AddContract provides a mock function with given fields: ctx, name, code, args, filename, update
func (_m *OverflowBetaClient) AddContract(ctx context.Context, name string, code []byte, args []cadence.Value, filename string, update bool) error {
	ret := _m.Called(ctx, name, code, args, filename, update)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, []cadence.Value, string, bool) error); ok {
		r0 = rf(ctx, name, code, args, filename, update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OverflowBetaClient_AddContract_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddContract'
type OverflowBetaClient_AddContract_Call struct {
	*mock.Call
}

// AddContract is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - code []byte
//   - args []cadence.Value
//   - filename string
//   - update bool
func (_e *OverflowBetaClient_Expecter) AddContract(ctx interface{}, name interface{}, code interface{}, args interface{}, filename interface{}, update interface{}) *OverflowBetaClient_AddContract_Call {
	return &OverflowBetaClient_AddContract_Call{Call: _e.mock.On("AddContract", ctx, name, code, args, filename, update)}
}

func (_c *OverflowBetaClient_AddContract_Call) Run(run func(ctx context.Context, name string, code []byte, args []cadence.Value, filename string, update bool)) *OverflowBetaClient_AddContract_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]byte), args[3].([]cadence.Value), args[4].(string), args[5].(bool))
	})
	return _c
}

func (_c *OverflowBetaClient_AddContract_Call) Return(_a0 error) *OverflowBetaClient_AddContract_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OverflowBetaClient_AddContract_Call) RunAndReturn(run func(context.Context, string, []byte, []cadence.Value, string, bool) error) *OverflowBetaClient_AddContract_Call {
	_c.Call.Return(run)
	return _c
}

// Address provides a mock function with given fields: key
func (_m *OverflowBetaClient) Address(key string) string {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// OverflowBetaClient_Address_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Address'
type OverflowBetaClient_Address_Call struct {
	*mock.Call
}

// Address is a helper method to define mock.On call
//   - key string
func (_e *OverflowBetaClient_Expecter) Address(key interface{}) *OverflowBetaClient_Address_Call {
	return &OverflowBetaClient_Address_Call{Call: _e.mock.On("Address", key)}
}

func (_c *OverflowBetaClient_Address_Call) Run(run func(key string)) *OverflowBetaClient_Address_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *OverflowBetaClient_Address_Call) Return(_a0 string) *OverflowBetaClient_Address_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OverflowBetaClient_Address_Call) RunAndReturn(run func(string) string) *OverflowBetaClient_Address_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadAndUploadFile provides a mock function with given fields: url, accountName
func (_m *OverflowBetaClient) DownloadAndUploadFile(url string, accountName string) error {
	ret := _m.Called(url, accountName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(url, accountName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OverflowBetaClient_DownloadAndUploadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadAndUploadFile'
type OverflowBetaClient_DownloadAndUploadFile_Call struct {
	*mock.Call
}

// DownloadAndUploadFile is a helper method to define mock.On call
//   - url string
//   - accountName string
func (_e *OverflowBetaClient_Expecter) DownloadAndUploadFile(url interface{}, accountName interface{}) *OverflowBetaClient_DownloadAndUploadFile_Call {
	return &OverflowBetaClient_DownloadAndUploadFile_Call{Call: _e.mock.On("DownloadAndUploadFile", url, accountName)}
}

func (_c *OverflowBetaClient_DownloadAndUploadFile_Call) Run(run func(url string, accountName string)) *OverflowBetaClient_DownloadAndUploadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *OverflowBetaClient_DownloadAndUploadFile_Call) Return(_a0 error) *OverflowBetaClient_DownloadAndUploadFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OverflowBetaClient_DownloadAndUploadFile_Call) RunAndReturn(run func(string, string) error) *OverflowBetaClient_DownloadAndUploadFile_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadImageAndUploadAsDataUrl provides a mock function with given fields: url, accountName
func (_m *OverflowBetaClient) DownloadImageAndUploadAsDataUrl(url string, accountName string) error {
	ret := _m.Called(url, accountName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(url, accountName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OverflowBetaClient_DownloadImageAndUploadAsDataUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadImageAndUploadAsDataUrl'
type OverflowBetaClient_DownloadImageAndUploadAsDataUrl_Call struct {
	*mock.Call
}

// DownloadImageAndUploadAsDataUrl is a helper method to define mock.On call
//   - url string
//   - accountName string
func (_e *OverflowBetaClient_Expecter) DownloadImageAndUploadAsDataUrl(url interface{}, accountName interface{}) *OverflowBetaClient_DownloadImageAndUploadAsDataUrl_Call {
	return &OverflowBetaClient_DownloadImageAndUploadAsDataUrl_Call{Call: _e.mock.On("DownloadImageAndUploadAsDataUrl", url, accountName)}
}

func (_c *OverflowBetaClient_DownloadImageAndUploadAsDataUrl_Call) Run(run func(url string, accountName string)) *OverflowBetaClient_DownloadImageAndUploadAsDataUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *OverflowBetaClient_DownloadImageAndUploadAsDataUrl_Call) Return(_a0 error) *OverflowBetaClient_DownloadImageAndUploadAsDataUrl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OverflowBetaClient_DownloadImageAndUploadAsDataUrl_Call) RunAndReturn(run func(string, string) error) *OverflowBetaClient_DownloadImageAndUploadAsDataUrl_Call {
	_c.Call.Return(run)
	return _c
}

// FetchEventsWithResult provides a mock function with given fields: opts
func (_m *OverflowBetaClient) FetchEventsWithResult(opts ...overflow.OverflowEventFetcherOption) overflow.EventFetcherResult {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 overflow.EventFetcherResult
	if rf, ok := ret.Get(0).(func(...overflow.OverflowEventFetcherOption) overflow.EventFetcherResult); ok {
		r0 = rf(opts...)
	} else {
		r0 = ret.Get(0).(overflow.EventFetcherResult)
	}

	return r0
}

// OverflowBetaClient_FetchEventsWithResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchEventsWithResult'
type OverflowBetaClient_FetchEventsWithResult_Call struct {
	*mock.Call
}

// FetchEventsWithResult is a helper method to define mock.On call
//   - opts ...overflow.OverflowEventFetcherOption
func (_e *OverflowBetaClient_Expecter) FetchEventsWithResult(opts ...interface{}) *OverflowBetaClient_FetchEventsWithResult_Call {
	return &OverflowBetaClient_FetchEventsWithResult_Call{Call: _e.mock.On("FetchEventsWithResult",
		append([]interface{}{}, opts...)...)}
}

func (_c *OverflowBetaClient_FetchEventsWithResult_Call) Run(run func(opts ...overflow.OverflowEventFetcherOption)) *OverflowBetaClient_FetchEventsWithResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]overflow.OverflowEventFetcherOption, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(overflow.OverflowEventFetcherOption)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *OverflowBetaClient_FetchEventsWithResult_Call) Return(_a0 overflow.EventFetcherResult) *OverflowBetaClient_FetchEventsWithResult_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OverflowBetaClient_FetchEventsWithResult_Call) RunAndReturn(run func(...overflow.OverflowEventFetcherOption) overflow.EventFetcherResult) *OverflowBetaClient_FetchEventsWithResult_Call {
	_c.Call.Return(run)
	return _c
}

// FillUpStorage provides a mock function with given fields: accountName
func (_m *OverflowBetaClient) FillUpStorage(accountName string) *overflow.OverflowState {
	ret := _m.Called(accountName)

	var r0 *overflow.OverflowState
	if rf, ok := ret.Get(0).(func(string) *overflow.OverflowState); ok {
		r0 = rf(accountName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*overflow.OverflowState)
		}
	}

	return r0
}

// OverflowBetaClient_FillUpStorage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FillUpStorage'
type OverflowBetaClient_FillUpStorage_Call struct {
	*mock.Call
}

// FillUpStorage is a helper method to define mock.On call
//   - accountName string
func (_e *OverflowBetaClient_Expecter) FillUpStorage(accountName interface{}) *OverflowBetaClient_FillUpStorage_Call {
	return &OverflowBetaClient_FillUpStorage_Call{Call: _e.mock.On("FillUpStorage", accountName)}
}

func (_c *OverflowBetaClient_FillUpStorage_Call) Run(run func(accountName string)) *OverflowBetaClient_FillUpStorage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *OverflowBetaClient_FillUpStorage_Call) Return(_a0 *overflow.OverflowState) *OverflowBetaClient_FillUpStorage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OverflowBetaClient_FillUpStorage_Call) RunAndReturn(run func(string) *overflow.OverflowState) *OverflowBetaClient_FillUpStorage_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccount provides a mock function with given fields: ctx, key
func (_m *OverflowBetaClient) GetAccount(ctx context.Context, key string) (*flow.Account, error) {
	ret := _m.Called(ctx, key)

	var r0 *flow.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*flow.Account, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *flow.Account); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OverflowBetaClient_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type OverflowBetaClient_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *OverflowBetaClient_Expecter) GetAccount(ctx interface{}, key interface{}) *OverflowBetaClient_GetAccount_Call {
	return &OverflowBetaClient_GetAccount_Call{Call: _e.mock.On("GetAccount", ctx, key)}
}

func (_c *OverflowBetaClient_GetAccount_Call) Run(run func(ctx context.Context, key string)) *OverflowBetaClient_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OverflowBetaClient_GetAccount_Call) Return(_a0 *flow.Account, _a1 error) *OverflowBetaClient_GetAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OverflowBetaClient_GetAccount_Call) RunAndReturn(run func(context.Context, string) (*flow.Account, error)) *OverflowBetaClient_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockAtHeight provides a mock function with given fields: ctx, height
func (_m *OverflowBetaClient) GetBlockAtHeight(ctx context.Context, height uint64) (*flow.Block, error) {
	ret := _m.Called(ctx, height)

	var r0 *flow.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*flow.Block, error)); ok {
		return rf(ctx, height)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *flow.Block); ok {
		r0 = rf(ctx, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OverflowBetaClient_GetBlockAtHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockAtHeight'
type OverflowBetaClient_GetBlockAtHeight_Call struct {
	*mock.Call
}

// GetBlockAtHeight is a helper method to define mock.On call
//   - ctx context.Context
//   - height uint64
func (_e *OverflowBetaClient_Expecter) GetBlockAtHeight(ctx interface{}, height interface{}) *OverflowBetaClient_GetBlockAtHeight_Call {
	return &OverflowBetaClient_GetBlockAtHeight_Call{Call: _e.mock.On("GetBlockAtHeight", ctx, height)}
}

func (_c *OverflowBetaClient_GetBlockAtHeight_Call) Run(run func(ctx context.Context, height uint64)) *OverflowBetaClient_GetBlockAtHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *OverflowBetaClient_GetBlockAtHeight_Call) Return(_a0 *flow.Block, _a1 error) *OverflowBetaClient_GetBlockAtHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OverflowBetaClient_GetBlockAtHeight_Call) RunAndReturn(run func(context.Context, uint64) (*flow.Block, error)) *OverflowBetaClient_GetBlockAtHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockById provides a mock function with given fields: ctx, blockId
func (_m *OverflowBetaClient) GetBlockById(ctx context.Context, blockId string) (*flow.Block, error) {
	ret := _m.Called(ctx, blockId)

	var r0 *flow.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*flow.Block, error)); ok {
		return rf(ctx, blockId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *flow.Block); ok {
		r0 = rf(ctx, blockId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, blockId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OverflowBetaClient_GetBlockById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockById'
type OverflowBetaClient_GetBlockById_Call struct {
	*mock.Call
}

// GetBlockById is a helper method to define mock.On call
//   - ctx context.Context
//   - blockId string
func (_e *OverflowBetaClient_Expecter) GetBlockById(ctx interface{}, blockId interface{}) *OverflowBetaClient_GetBlockById_Call {
	return &OverflowBetaClient_GetBlockById_Call{Call: _e.mock.On("GetBlockById", ctx, blockId)}
}

func (_c *OverflowBetaClient_GetBlockById_Call) Run(run func(ctx context.Context, blockId string)) *OverflowBetaClient_GetBlockById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OverflowBetaClient_GetBlockById_Call) Return(_a0 *flow.Block, _a1 error) *OverflowBetaClient_GetBlockById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OverflowBetaClient_GetBlockById_Call) RunAndReturn(run func(context.Context, string) (*flow.Block, error)) *OverflowBetaClient_GetBlockById_Call {
	_c.Call.Return(run)
	return _c
}

// GetFreeCapacity provides a mock function with given fields: accountName
func (_m *OverflowBetaClient) GetFreeCapacity(accountName string) int {
	ret := _m.Called(accountName)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(accountName)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// OverflowBetaClient_GetFreeCapacity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFreeCapacity'
type OverflowBetaClient_GetFreeCapacity_Call struct {
	*mock.Call
}

// GetFreeCapacity is a helper method to define mock.On call
//   - accountName string
func (_e *OverflowBetaClient_Expecter) GetFreeCapacity(accountName interface{}) *OverflowBetaClient_GetFreeCapacity_Call {
	return &OverflowBetaClient_GetFreeCapacity_Call{Call: _e.mock.On("GetFreeCapacity", accountName)}
}

func (_c *OverflowBetaClient_GetFreeCapacity_Call) Run(run func(accountName string)) *OverflowBetaClient_GetFreeCapacity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *OverflowBetaClient_GetFreeCapacity_Call) Return(_a0 int) *OverflowBetaClient_GetFreeCapacity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OverflowBetaClient_GetFreeCapacity_Call) RunAndReturn(run func(string) int) *OverflowBetaClient_GetFreeCapacity_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestBlock provides a mock function with given fields: ctx
func (_m *OverflowBetaClient) GetLatestBlock(ctx context.Context) (*flow.Block, error) {
	ret := _m.Called(ctx)

	var r0 *flow.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*flow.Block, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *flow.Block); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OverflowBetaClient_GetLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBlock'
type OverflowBetaClient_GetLatestBlock_Call struct {
	*mock.Call
}

// GetLatestBlock is a helper method to define mock.On call
//   - ctx context.Context
func (_e *OverflowBetaClient_Expecter) GetLatestBlock(ctx interface{}) *OverflowBetaClient_GetLatestBlock_Call {
	return &OverflowBetaClient_GetLatestBlock_Call{Call: _e.mock.On("GetLatestBlock", ctx)}
}

func (_c *OverflowBetaClient_GetLatestBlock_Call) Run(run func(ctx context.Context)) *OverflowBetaClient_GetLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *OverflowBetaClient_GetLatestBlock_Call) Return(_a0 *flow.Block, _a1 error) *OverflowBetaClient_GetLatestBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OverflowBetaClient_GetLatestBlock_Call) RunAndReturn(run func(context.Context) (*flow.Block, error)) *OverflowBetaClient_GetLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetNetwork provides a mock function with given fields:
func (_m *OverflowBetaClient) GetNetwork() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// OverflowBetaClient_GetNetwork_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNetwork'
type OverflowBetaClient_GetNetwork_Call struct {
	*mock.Call
}

// GetNetwork is a helper method to define mock.On call
func (_e *OverflowBetaClient_Expecter) GetNetwork() *OverflowBetaClient_GetNetwork_Call {
	return &OverflowBetaClient_GetNetwork_Call{Call: _e.mock.On("GetNetwork")}
}

func (_c *OverflowBetaClient_GetNetwork_Call) Run(run func()) *OverflowBetaClient_GetNetwork_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OverflowBetaClient_GetNetwork_Call) Return(_a0 string) *OverflowBetaClient_GetNetwork_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OverflowBetaClient_GetNetwork_Call) RunAndReturn(run func() string) *OverflowBetaClient_GetNetwork_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionById provides a mock function with given fields: ctx, id
func (_m *OverflowBetaClient) GetTransactionById(ctx context.Context, id flow.Identifier) (*overflow.OverflowTransaction, error) {
	ret := _m.Called(ctx, id)

	var r0 *overflow.OverflowTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (*overflow.OverflowTransaction, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) *overflow.OverflowTransaction); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*overflow.OverflowTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OverflowBetaClient_GetTransactionById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionById'
type OverflowBetaClient_GetTransactionById_Call struct {
	*mock.Call
}

// GetTransactionById is a helper method to define mock.On call
//   - ctx context.Context
//   - id flow.Identifier
func (_e *OverflowBetaClient_Expecter) GetTransactionById(ctx interface{}, id interface{}) *OverflowBetaClient_GetTransactionById_Call {
	return &OverflowBetaClient_GetTransactionById_Call{Call: _e.mock.On("GetTransactionById", ctx, id)}
}

func (_c *OverflowBetaClient_GetTransactionById_Call) Run(run func(ctx context.Context, id flow.Identifier)) *OverflowBetaClient_GetTransactionById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *OverflowBetaClient_GetTransactionById_Call) Return(_a0 *overflow.OverflowTransaction, _a1 error) *OverflowBetaClient_GetTransactionById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OverflowBetaClient_GetTransactionById_Call) RunAndReturn(run func(context.Context, flow.Identifier) (*overflow.OverflowTransaction, error)) *OverflowBetaClient_GetTransactionById_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactions provides a mock function with given fields: ctx, id
func (_m *OverflowBetaClient) GetTransactions(ctx context.Context, id flow.Identifier) ([]overflow.OverflowTransaction, error) {
	ret := _m.Called(ctx, id)

	var r0 []overflow.OverflowTransaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) ([]overflow.OverflowTransaction, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) []overflow.OverflowTransaction); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]overflow.OverflowTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OverflowBetaClient_GetTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactions'
type OverflowBetaClient_GetTransactions_Call struct {
	*mock.Call
}

// GetTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - id flow.Identifier
func (_e *OverflowBetaClient_Expecter) GetTransactions(ctx interface{}, id interface{}) *OverflowBetaClient_GetTransactions_Call {
	return &OverflowBetaClient_GetTransactions_Call{Call: _e.mock.On("GetTransactions", ctx, id)}
}

func (_c *OverflowBetaClient_GetTransactions_Call) Run(run func(ctx context.Context, id flow.Identifier)) *OverflowBetaClient_GetTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(flow.Identifier))
	})
	return _c
}

func (_c *OverflowBetaClient_GetTransactions_Call) Return(_a0 []overflow.OverflowTransaction, _a1 error) *OverflowBetaClient_GetTransactions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OverflowBetaClient_GetTransactions_Call) RunAndReturn(run func(context.Context, flow.Identifier) ([]overflow.OverflowTransaction, error)) *OverflowBetaClient_GetTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// MintFlowTokens provides a mock function with given fields: accountName, amount
func (_m *OverflowBetaClient) MintFlowTokens(accountName string, amount float64) *overflow.OverflowState {
	ret := _m.Called(accountName, amount)

	var r0 *overflow.OverflowState
	if rf, ok := ret.Get(0).(func(string, float64) *overflow.OverflowState); ok {
		r0 = rf(accountName, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*overflow.OverflowState)
		}
	}

	return r0
}

// OverflowBetaClient_MintFlowTokens_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MintFlowTokens'
type OverflowBetaClient_MintFlowTokens_Call struct {
	*mock.Call
}

// MintFlowTokens is a helper method to define mock.On call
//   - accountName string
//   - amount float64
func (_e *OverflowBetaClient_Expecter) MintFlowTokens(accountName interface{}, amount interface{}) *OverflowBetaClient_MintFlowTokens_Call {
	return &OverflowBetaClient_MintFlowTokens_Call{Call: _e.mock.On("MintFlowTokens", accountName, amount)}
}

func (_c *OverflowBetaClient_MintFlowTokens_Call) Run(run func(accountName string, amount float64)) *OverflowBetaClient_MintFlowTokens_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(float64))
	})
	return _c
}

func (_c *OverflowBetaClient_MintFlowTokens_Call) Return(_a0 *overflow.OverflowState) *OverflowBetaClient_MintFlowTokens_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OverflowBetaClient_MintFlowTokens_Call) RunAndReturn(run func(string, float64) *overflow.OverflowState) *OverflowBetaClient_MintFlowTokens_Call {
	_c.Call.Return(run)
	return _c
}

// QualifiedIdentifier provides a mock function with given fields: contract, name
func (_m *OverflowBetaClient) QualifiedIdentifier(contract string, name string) (string, error) {
	ret := _m.Called(contract, name)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(contract, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(contract, name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(contract, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OverflowBetaClient_QualifiedIdentifier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QualifiedIdentifier'
type OverflowBetaClient_QualifiedIdentifier_Call struct {
	*mock.Call
}

// QualifiedIdentifier is a helper method to define mock.On call
//   - contract string
//   - name string
func (_e *OverflowBetaClient_Expecter) QualifiedIdentifier(contract interface{}, name interface{}) *OverflowBetaClient_QualifiedIdentifier_Call {
	return &OverflowBetaClient_QualifiedIdentifier_Call{Call: _e.mock.On("QualifiedIdentifier", contract, name)}
}

func (_c *OverflowBetaClient_QualifiedIdentifier_Call) Run(run func(contract string, name string)) *OverflowBetaClient_QualifiedIdentifier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *OverflowBetaClient_QualifiedIdentifier_Call) Return(_a0 string, _a1 error) *OverflowBetaClient_QualifiedIdentifier_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OverflowBetaClient_QualifiedIdentifier_Call) RunAndReturn(run func(string, string) (string, error)) *OverflowBetaClient_QualifiedIdentifier_Call {
	_c.Call.Return(run)
	return _c
}

// QualifiedIdentifierFromSnakeCase provides a mock function with given fields: typeName
func (_m *OverflowBetaClient) QualifiedIdentifierFromSnakeCase(typeName string) (string, error) {
	ret := _m.Called(typeName)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(typeName)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(typeName)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(typeName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OverflowBetaClient_QualifiedIdentifierFromSnakeCase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QualifiedIdentifierFromSnakeCase'
type OverflowBetaClient_QualifiedIdentifierFromSnakeCase_Call struct {
	*mock.Call
}

// QualifiedIdentifierFromSnakeCase is a helper method to define mock.On call
//   - typeName string
func (_e *OverflowBetaClient_Expecter) QualifiedIdentifierFromSnakeCase(typeName interface{}) *OverflowBetaClient_QualifiedIdentifierFromSnakeCase_Call {
	return &OverflowBetaClient_QualifiedIdentifierFromSnakeCase_Call{Call: _e.mock.On("QualifiedIdentifierFromSnakeCase", typeName)}
}

func (_c *OverflowBetaClient_QualifiedIdentifierFromSnakeCase_Call) Run(run func(typeName string)) *OverflowBetaClient_QualifiedIdentifierFromSnakeCase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *OverflowBetaClient_QualifiedIdentifierFromSnakeCase_Call) Return(_a0 string, _a1 error) *OverflowBetaClient_QualifiedIdentifierFromSnakeCase_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OverflowBetaClient_QualifiedIdentifierFromSnakeCase_Call) RunAndReturn(run func(string) (string, error)) *OverflowBetaClient_QualifiedIdentifierFromSnakeCase_Call {
	_c.Call.Return(run)
	return _c
}

// Script provides a mock function with given fields: filename, opts
func (_m *OverflowBetaClient) Script(filename string, opts ...overflow.OverflowInteractionOption) *overflow.OverflowScriptResult {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filename)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *overflow.OverflowScriptResult
	if rf, ok := ret.Get(0).(func(string, ...overflow.OverflowInteractionOption) *overflow.OverflowScriptResult); ok {
		r0 = rf(filename, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*overflow.OverflowScriptResult)
		}
	}

	return r0
}

// OverflowBetaClient_Script_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Script'
type OverflowBetaClient_Script_Call struct {
	*mock.Call
}

// Script is a helper method to define mock.On call
//   - filename string
//   - opts ...overflow.OverflowInteractionOption
func (_e *OverflowBetaClient_Expecter) Script(filename interface{}, opts ...interface{}) *OverflowBetaClient_Script_Call {
	return &OverflowBetaClient_Script_Call{Call: _e.mock.On("Script",
		append([]interface{}{filename}, opts...)...)}
}

func (_c *OverflowBetaClient_Script_Call) Run(run func(filename string, opts ...overflow.OverflowInteractionOption)) *OverflowBetaClient_Script_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]overflow.OverflowInteractionOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(overflow.OverflowInteractionOption)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *OverflowBetaClient_Script_Call) Return(_a0 *overflow.OverflowScriptResult) *OverflowBetaClient_Script_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OverflowBetaClient_Script_Call) RunAndReturn(run func(string, ...overflow.OverflowInteractionOption) *overflow.OverflowScriptResult) *OverflowBetaClient_Script_Call {
	_c.Call.Return(run)
	return _c
}

// ScriptFN provides a mock function with given fields: outerOpts
func (_m *OverflowBetaClient) ScriptFN(outerOpts ...overflow.OverflowInteractionOption) overflow.OverflowScriptFunction {
	_va := make([]interface{}, len(outerOpts))
	for _i := range outerOpts {
		_va[_i] = outerOpts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 overflow.OverflowScriptFunction
	if rf, ok := ret.Get(0).(func(...overflow.OverflowInteractionOption) overflow.OverflowScriptFunction); ok {
		r0 = rf(outerOpts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(overflow.OverflowScriptFunction)
		}
	}

	return r0
}

// OverflowBetaClient_ScriptFN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScriptFN'
type OverflowBetaClient_ScriptFN_Call struct {
	*mock.Call
}

// ScriptFN is a helper method to define mock.On call
//   - outerOpts ...overflow.OverflowInteractionOption
func (_e *OverflowBetaClient_Expecter) ScriptFN(outerOpts ...interface{}) *OverflowBetaClient_ScriptFN_Call {
	return &OverflowBetaClient_ScriptFN_Call{Call: _e.mock.On("ScriptFN",
		append([]interface{}{}, outerOpts...)...)}
}

func (_c *OverflowBetaClient_ScriptFN_Call) Run(run func(outerOpts ...overflow.OverflowInteractionOption)) *OverflowBetaClient_ScriptFN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]overflow.OverflowInteractionOption, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(overflow.OverflowInteractionOption)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *OverflowBetaClient_ScriptFN_Call) Return(_a0 overflow.OverflowScriptFunction) *OverflowBetaClient_ScriptFN_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OverflowBetaClient_ScriptFN_Call) RunAndReturn(run func(...overflow.OverflowInteractionOption) overflow.OverflowScriptFunction) *OverflowBetaClient_ScriptFN_Call {
	_c.Call.Return(run)
	return _c
}

// ScriptFileNameFN provides a mock function with given fields: filename, outerOpts
func (_m *OverflowBetaClient) ScriptFileNameFN(filename string, outerOpts ...overflow.OverflowInteractionOption) overflow.OverflowScriptOptsFunction {
	_va := make([]interface{}, len(outerOpts))
	for _i := range outerOpts {
		_va[_i] = outerOpts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filename)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 overflow.OverflowScriptOptsFunction
	if rf, ok := ret.Get(0).(func(string, ...overflow.OverflowInteractionOption) overflow.OverflowScriptOptsFunction); ok {
		r0 = rf(filename, outerOpts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(overflow.OverflowScriptOptsFunction)
		}
	}

	return r0
}

// OverflowBetaClient_ScriptFileNameFN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ScriptFileNameFN'
type OverflowBetaClient_ScriptFileNameFN_Call struct {
	*mock.Call
}

// ScriptFileNameFN is a helper method to define mock.On call
//   - filename string
//   - outerOpts ...overflow.OverflowInteractionOption
func (_e *OverflowBetaClient_Expecter) ScriptFileNameFN(filename interface{}, outerOpts ...interface{}) *OverflowBetaClient_ScriptFileNameFN_Call {
	return &OverflowBetaClient_ScriptFileNameFN_Call{Call: _e.mock.On("ScriptFileNameFN",
		append([]interface{}{filename}, outerOpts...)...)}
}

func (_c *OverflowBetaClient_ScriptFileNameFN_Call) Run(run func(filename string, outerOpts ...overflow.OverflowInteractionOption)) *OverflowBetaClient_ScriptFileNameFN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]overflow.OverflowInteractionOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(overflow.OverflowInteractionOption)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *OverflowBetaClient_ScriptFileNameFN_Call) Return(_a0 overflow.OverflowScriptOptsFunction) *OverflowBetaClient_ScriptFileNameFN_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OverflowBetaClient_ScriptFileNameFN_Call) RunAndReturn(run func(string, ...overflow.OverflowInteractionOption) overflow.OverflowScriptOptsFunction) *OverflowBetaClient_ScriptFileNameFN_Call {
	_c.Call.Return(run)
	return _c
}

// SignUserMessage provides a mock function with given fields: account, message
func (_m *OverflowBetaClient) SignUserMessage(account string, message string) (string, error) {
	ret := _m.Called(account, message)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(account, message)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(account, message)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(account, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OverflowBetaClient_SignUserMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignUserMessage'
type OverflowBetaClient_SignUserMessage_Call struct {
	*mock.Call
}

// SignUserMessage is a helper method to define mock.On call
//   - account string
//   - message string
func (_e *OverflowBetaClient_Expecter) SignUserMessage(account interface{}, message interface{}) *OverflowBetaClient_SignUserMessage_Call {
	return &OverflowBetaClient_SignUserMessage_Call{Call: _e.mock.On("SignUserMessage", account, message)}
}

func (_c *OverflowBetaClient_SignUserMessage_Call) Run(run func(account string, message string)) *OverflowBetaClient_SignUserMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *OverflowBetaClient_SignUserMessage_Call) Return(_a0 string, _a1 error) *OverflowBetaClient_SignUserMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OverflowBetaClient_SignUserMessage_Call) RunAndReturn(run func(string, string) (string, error)) *OverflowBetaClient_SignUserMessage_Call {
	_c.Call.Return(run)
	return _c
}

// StreamTransactions provides a mock function with given fields: ctx, poll, height, logger, channel
func (_m *OverflowBetaClient) StreamTransactions(ctx context.Context, poll time.Duration, height uint64, logger *zap.Logger, channel chan<- overflow.BlockResult) error {
	ret := _m.Called(ctx, poll, height, logger, channel)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, uint64, *zap.Logger, chan<- overflow.BlockResult) error); ok {
		r0 = rf(ctx, poll, height, logger, channel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OverflowBetaClient_StreamTransactions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamTransactions'
type OverflowBetaClient_StreamTransactions_Call struct {
	*mock.Call
}

// StreamTransactions is a helper method to define mock.On call
//   - ctx context.Context
//   - poll time.Duration
//   - height uint64
//   - logger *zap.Logger
//   - channel chan<- overflow.BlockResult
func (_e *OverflowBetaClient_Expecter) StreamTransactions(ctx interface{}, poll interface{}, height interface{}, logger interface{}, channel interface{}) *OverflowBetaClient_StreamTransactions_Call {
	return &OverflowBetaClient_StreamTransactions_Call{Call: _e.mock.On("StreamTransactions", ctx, poll, height, logger, channel)}
}

func (_c *OverflowBetaClient_StreamTransactions_Call) Run(run func(ctx context.Context, poll time.Duration, height uint64, logger *zap.Logger, channel chan<- overflow.BlockResult)) *OverflowBetaClient_StreamTransactions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration), args[2].(uint64), args[3].(*zap.Logger), args[4].(chan<- overflow.BlockResult))
	})
	return _c
}

func (_c *OverflowBetaClient_StreamTransactions_Call) Return(_a0 error) *OverflowBetaClient_StreamTransactions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OverflowBetaClient_StreamTransactions_Call) RunAndReturn(run func(context.Context, time.Duration, uint64, *zap.Logger, chan<- overflow.BlockResult) error) *OverflowBetaClient_StreamTransactions_Call {
	_c.Call.Return(run)
	return _c
}

// Tx provides a mock function with given fields: filename, opts
func (_m *OverflowBetaClient) Tx(filename string, opts ...overflow.OverflowInteractionOption) *overflow.OverflowResult {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filename)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *overflow.OverflowResult
	if rf, ok := ret.Get(0).(func(string, ...overflow.OverflowInteractionOption) *overflow.OverflowResult); ok {
		r0 = rf(filename, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*overflow.OverflowResult)
		}
	}

	return r0
}

// OverflowBetaClient_Tx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Tx'
type OverflowBetaClient_Tx_Call struct {
	*mock.Call
}

// Tx is a helper method to define mock.On call
//   - filename string
//   - opts ...overflow.OverflowInteractionOption
func (_e *OverflowBetaClient_Expecter) Tx(filename interface{}, opts ...interface{}) *OverflowBetaClient_Tx_Call {
	return &OverflowBetaClient_Tx_Call{Call: _e.mock.On("Tx",
		append([]interface{}{filename}, opts...)...)}
}

func (_c *OverflowBetaClient_Tx_Call) Run(run func(filename string, opts ...overflow.OverflowInteractionOption)) *OverflowBetaClient_Tx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]overflow.OverflowInteractionOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(overflow.OverflowInteractionOption)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *OverflowBetaClient_Tx_Call) Return(_a0 *overflow.OverflowResult) *OverflowBetaClient_Tx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OverflowBetaClient_Tx_Call) RunAndReturn(run func(string, ...overflow.OverflowInteractionOption) *overflow.OverflowResult) *OverflowBetaClient_Tx_Call {
	_c.Call.Return(run)
	return _c
}

// TxFN provides a mock function with given fields: outerOpts
func (_m *OverflowBetaClient) TxFN(outerOpts ...overflow.OverflowInteractionOption) overflow.OverflowTransactionFunction {
	_va := make([]interface{}, len(outerOpts))
	for _i := range outerOpts {
		_va[_i] = outerOpts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 overflow.OverflowTransactionFunction
	if rf, ok := ret.Get(0).(func(...overflow.OverflowInteractionOption) overflow.OverflowTransactionFunction); ok {
		r0 = rf(outerOpts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(overflow.OverflowTransactionFunction)
		}
	}

	return r0
}

// OverflowBetaClient_TxFN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TxFN'
type OverflowBetaClient_TxFN_Call struct {
	*mock.Call
}

// TxFN is a helper method to define mock.On call
//   - outerOpts ...overflow.OverflowInteractionOption
func (_e *OverflowBetaClient_Expecter) TxFN(outerOpts ...interface{}) *OverflowBetaClient_TxFN_Call {
	return &OverflowBetaClient_TxFN_Call{Call: _e.mock.On("TxFN",
		append([]interface{}{}, outerOpts...)...)}
}

func (_c *OverflowBetaClient_TxFN_Call) Run(run func(outerOpts ...overflow.OverflowInteractionOption)) *OverflowBetaClient_TxFN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]overflow.OverflowInteractionOption, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(overflow.OverflowInteractionOption)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *OverflowBetaClient_TxFN_Call) Return(_a0 overflow.OverflowTransactionFunction) *OverflowBetaClient_TxFN_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OverflowBetaClient_TxFN_Call) RunAndReturn(run func(...overflow.OverflowInteractionOption) overflow.OverflowTransactionFunction) *OverflowBetaClient_TxFN_Call {
	_c.Call.Return(run)
	return _c
}

// TxFileNameFN provides a mock function with given fields: filename, outerOpts
func (_m *OverflowBetaClient) TxFileNameFN(filename string, outerOpts ...overflow.OverflowInteractionOption) overflow.OverflowTransactionOptsFunction {
	_va := make([]interface{}, len(outerOpts))
	for _i := range outerOpts {
		_va[_i] = outerOpts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filename)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 overflow.OverflowTransactionOptsFunction
	if rf, ok := ret.Get(0).(func(string, ...overflow.OverflowInteractionOption) overflow.OverflowTransactionOptsFunction); ok {
		r0 = rf(filename, outerOpts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(overflow.OverflowTransactionOptsFunction)
		}
	}

	return r0
}

// OverflowBetaClient_TxFileNameFN_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TxFileNameFN'
type OverflowBetaClient_TxFileNameFN_Call struct {
	*mock.Call
}

// TxFileNameFN is a helper method to define mock.On call
//   - filename string
//   - outerOpts ...overflow.OverflowInteractionOption
func (_e *OverflowBetaClient_Expecter) TxFileNameFN(filename interface{}, outerOpts ...interface{}) *OverflowBetaClient_TxFileNameFN_Call {
	return &OverflowBetaClient_TxFileNameFN_Call{Call: _e.mock.On("TxFileNameFN",
		append([]interface{}{filename}, outerOpts...)...)}
}

func (_c *OverflowBetaClient_TxFileNameFN_Call) Run(run func(filename string, outerOpts ...overflow.OverflowInteractionOption)) *OverflowBetaClient_TxFileNameFN_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]overflow.OverflowInteractionOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(overflow.OverflowInteractionOption)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *OverflowBetaClient_TxFileNameFN_Call) Return(_a0 overflow.OverflowTransactionOptsFunction) *OverflowBetaClient_TxFileNameFN_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OverflowBetaClient_TxFileNameFN_Call) RunAndReturn(run func(string, ...overflow.OverflowInteractionOption) overflow.OverflowTransactionOptsFunction) *OverflowBetaClient_TxFileNameFN_Call {
	_c.Call.Return(run)
	return _c
}

// UploadFile provides a mock function with given fields: filename, accountName
func (_m *OverflowBetaClient) UploadFile(filename string, accountName string) error {
	ret := _m.Called(filename, accountName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(filename, accountName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OverflowBetaClient_UploadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadFile'
type OverflowBetaClient_UploadFile_Call struct {
	*mock.Call
}

// UploadFile is a helper method to define mock.On call
//   - filename string
//   - accountName string
func (_e *OverflowBetaClient_Expecter) UploadFile(filename interface{}, accountName interface{}) *OverflowBetaClient_UploadFile_Call {
	return &OverflowBetaClient_UploadFile_Call{Call: _e.mock.On("UploadFile", filename, accountName)}
}

func (_c *OverflowBetaClient_UploadFile_Call) Run(run func(filename string, accountName string)) *OverflowBetaClient_UploadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *OverflowBetaClient_UploadFile_Call) Return(_a0 error) *OverflowBetaClient_UploadFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OverflowBetaClient_UploadFile_Call) RunAndReturn(run func(string, string) error) *OverflowBetaClient_UploadFile_Call {
	_c.Call.Return(run)
	return _c
}

// UploadImageAsDataUrl provides a mock function with given fields: filename, accountName
func (_m *OverflowBetaClient) UploadImageAsDataUrl(filename string, accountName string) error {
	ret := _m.Called(filename, accountName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(filename, accountName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OverflowBetaClient_UploadImageAsDataUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadImageAsDataUrl'
type OverflowBetaClient_UploadImageAsDataUrl_Call struct {
	*mock.Call
}

// UploadImageAsDataUrl is a helper method to define mock.On call
//   - filename string
//   - accountName string
func (_e *OverflowBetaClient_Expecter) UploadImageAsDataUrl(filename interface{}, accountName interface{}) *OverflowBetaClient_UploadImageAsDataUrl_Call {
	return &OverflowBetaClient_UploadImageAsDataUrl_Call{Call: _e.mock.On("UploadImageAsDataUrl", filename, accountName)}
}

func (_c *OverflowBetaClient_UploadImageAsDataUrl_Call) Run(run func(filename string, accountName string)) *OverflowBetaClient_UploadImageAsDataUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *OverflowBetaClient_UploadImageAsDataUrl_Call) Return(_a0 error) *OverflowBetaClient_UploadImageAsDataUrl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OverflowBetaClient_UploadImageAsDataUrl_Call) RunAndReturn(run func(string, string) error) *OverflowBetaClient_UploadImageAsDataUrl_Call {
	_c.Call.Return(run)
	return _c
}

// UploadString provides a mock function with given fields: content, accountName
func (_m *OverflowBetaClient) UploadString(content string, accountName string) error {
	ret := _m.Called(content, accountName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(content, accountName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OverflowBetaClient_UploadString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadString'
type OverflowBetaClient_UploadString_Call struct {
	*mock.Call
}

// UploadString is a helper method to define mock.On call
//   - content string
//   - accountName string
func (_e *OverflowBetaClient_Expecter) UploadString(content interface{}, accountName interface{}) *OverflowBetaClient_UploadString_Call {
	return &OverflowBetaClient_UploadString_Call{Call: _e.mock.On("UploadString", content, accountName)}
}

func (_c *OverflowBetaClient_UploadString_Call) Run(run func(content string, accountName string)) *OverflowBetaClient_UploadString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *OverflowBetaClient_UploadString_Call) Return(_a0 error) *OverflowBetaClient_UploadString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OverflowBetaClient_UploadString_Call) RunAndReturn(run func(string, string) error) *OverflowBetaClient_UploadString_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewOverflowBetaClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewOverflowBetaClient creates a new instance of OverflowBetaClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOverflowBetaClient(t mockConstructorTestingTNewOverflowBetaClient) *OverflowBetaClient {
	mock := &OverflowBetaClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
