&overflow.MergedSolution{Networks: map[string]overflow.MergedSolutionNetwork{
	"emulator": overflow.MergedSolutionNetwork{
		Scripts: map[string]overflow.CodeWithSpec{
			"block": overflow.CodeWithSpec{Code: `// test script to ensure code is running
pub fun main(): UInt64 {
    let height = getCurrentBlock().height
    log(height)
    return height
}`},
			"test": overflow.CodeWithSpec{
				Code: `// test script to ensure code is running
import NonFungibleToken from 0xf8d6e0586b0a20c7

pub fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				Spec: &overflow.DeclarationInfo{
					ParameterOrder: []string{
						"account",
					},
					Parameters: map[string]string{"account": "Address"},
				},
			},
		},
		Transactions: map[string]overflow.CodeWithSpec{
			"arguments": overflow.CodeWithSpec{
				Code: `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
  prepare(acct: AuthAccount) {
    log(acct)
    log(test)

 }
}`,
				Spec: &overflow.DeclarationInfo{
					ParameterOrder: []string{
						"test",
					},
					Parameters: map[string]string{"test": "String"},
				},
			},
			"argumentsWithAccount": overflow.CodeWithSpec{
				Code: `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:Address) {
  prepare(acct: AuthAccount) {
    log("signer")
    log(acct)
    log("argument")
    log(test)
 }
}`,
				Spec: &overflow.DeclarationInfo{
					ParameterOrder: []string{
						"test",
					},
					Parameters: map[string]string{"test": "Address"},
				},
			},
			"create_nft_collection": overflow.CodeWithSpec{Code: `import NonFungibleToken from 0xf8d6e0586b0a20c7

// This transaction creates an empty NFT Collection in the signer's account
transaction {
  prepare(acct: AuthAccount) {
    // store an empty NFT Collection in account storage
    acct.save<@NonFungibleToken.Collection>(<-NonFungibleToken.createEmptyCollection(), to: /storage/NFTCollection)

    // publish a capability to the Collection in storage
    acct.link<&{NonFungibleToken.NFTReceiver}>(/public/NFTReceiver, target: /storage/NFTCollection)

    log("Created a new empty collection and published a reference")
  }
}`},
			"mint_tokens": overflow.CodeWithSpec{
				Code: `import FungibleToken from 0xee82856bf20e2aa6
import FlowToken from 0x0ae53cb6e3f42a79


transaction(recipient: Address, amount: UFix64) {
    let tokenAdmin: &FlowToken.Administrator
    let tokenReceiver: &{FungibleToken.Receiver}

    prepare(signer: AuthAccount) {
        self.tokenAdmin = signer
            .borrow<&FlowToken.Administrator>(from: /storage/flowTokenAdmin)
            ?? panic("Signer is not the token admin")

        self.tokenReceiver = getAccount(recipient)
            .getCapability(/public/flowTokenReceiver)
            .borrow<&{FungibleToken.Receiver}>()
            ?? panic("Unable to borrow receiver reference")
    }

    execute {
        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)
        let mintedVault <- minter.mintTokens(amount: amount)

        self.tokenReceiver.deposit(from: <-mintedVault)

        destroy minter
    }
}`,
				Spec: &overflow.DeclarationInfo{
					ParameterOrder: []string{
						"recipient",
						"amount",
					},
					Parameters: map[string]string{
						"amount":    "UFix64",
						"recipient": "Address",
					},
				},
			},
			"signWithMultipleAccounts": overflow.CodeWithSpec{
				Code: `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
  prepare(acct: AuthAccount, account2: AuthAccount) {
    log(acct)
    log(account2)
 }
}`,
				Spec: &overflow.DeclarationInfo{
					ParameterOrder: []string{
						"test",
					},
					Parameters: map[string]string{"test": "String"},
				},
			},
		},
		Contracts: &map[string]string{
			"Debug": `import NonFungibleToken from 0xf8d6e0586b0a20c7

pub contract Debug {


pub struct Foo{
	pub let bar: String

	init(bar: String) {
		self.bar=bar
	}
}

pub event Log(msg: String)
pub event LogNum(id: UInt64)

pub fun id(_ id:UInt64) {
	emit LogNum(id:id)
}

pub fun log(_ msg: String) : String {
	emit Log(msg: msg)
	return msg
}

}
`,
			"NonFungibleToken": "// NFTv2.cdc\n//\n// This is a complete version of the NonFungibleToken contract\n// that includes withdraw and deposit functionality, as well as a\n// collection resource that can be used to bundle NFTs together.\n//\n// It also includes a definition for the Minter resource,\n// which can be used by admins to mint new NFTs.\n\npub contract NonFungibleToken {\n\n    pub event TestEvent(ufix:UFix64, uint: UInt64, test: String)\n  // Declare the NFT resource type\n  pub resource NFT {\n      // The unique ID that differentiates each NFT\n      pub let id: UInt64\n\n      // Initialize both fields in the init function\n      init(initID: UInt64) {\n          self.id = initID\n      }\n  }\n\n  // We define this interface purely as a way to allow users\n  // to create public, restricted references to their NFT Collection.\n  // They would use this to only expose the deposit, getIDs,\n  // and idExists fields in their Collection\n  pub resource interface NFTReceiver {\n\n      pub fun deposit(token: @NFT)\n\n      pub fun getIDs(): [UInt64]\n\n      pub fun idExists(id: UInt64): Bool\n  }\n\n  // The definition of the Collection resource that\n  // holds the NFTs that a user owns\n  pub resource Collection: NFTReceiver {\n      // dictionary of NFT conforming tokens\n      // NFT is a resource type with an `UInt64` ID field\n      pub var ownedNFTs: @{UInt64: NFT}\n\n      // Initialize the NFTs field to an empty collection\n      init () {\n          self.ownedNFTs <- {}\n      }\n\n      // withdraw\n      //\n      // Function that removes an NFT from the collection\n      // and moves it to the calling context\n      pub fun withdraw(withdrawID: UInt64): @NFT {\n          // If the NFT isn't found, the transaction panics and reverts\n          let token <- self.ownedNFTs.remove(key: withdrawID)!\n\n          return <-token\n      }\n\n      // deposit\n      //\n      // Function that takes a NFT as an argument and\n      // adds it to the collections dictionary\n      pub fun deposit(token: @NFT) {\n          // add the new token to the dictionary which removes the old one\n          let oldToken <- self.ownedNFTs[token.id] <- token\n          destroy oldToken\n      }\n\n      // idExists checks to see if a NFT\n      // with the given ID exists in the collection\n      pub fun idExists(id: UInt64): Bool {\n          return self.ownedNFTs[id] != nil\n      }\n\n      // getIDs returns an array of the IDs that are in the collection\n      pub fun getIDs(): [UInt64] {\n          return self.ownedNFTs.keys\n      }\n\n      // If a resource has member fields that are resources,\n      // it is required to define a `destroy` block to specify\n      // what should happen to those member fields\n      // if the top level object is destroyed\n      destroy() {\n          destroy self.ownedNFTs\n      }\n  }\n\n  // creates a new empty Collection resource and returns it\n  pub fun createEmptyCollection(): @Collection {\n      return <- create Collection()\n  }\n\n  // NFTMinter\n  //\n  // Resource that would be owned by an admin or by a smart contract\n  // that allows them to mint new NFTs when needed\n  pub resource NFTMinter {\n\n      // the ID that is used to mint NFTs\n      // it is onlt incremented so that NFT ids remain\n      // unique. It also keeps track of the total number of NFTs\n      // in existence\n      pub var idCount: UInt64\n\n      init() {\n          self.idCount = 1\n      }\n\n      // mintNFT\n      //\n      // Function that mints a new NFT with a new ID\n      // and deposits it in the recipients collection\n      // using their collection reference\n      pub fun mintNFT(recipient: &AnyResource{NFTReceiver}) {\n\n          // create a new NFT\n          var newNFT <- create NFT(initID: self.idCount)\n\n          // deposit it in the recipient's account using their reference\n          recipient.deposit(token: <-newNFT)\n\n          // change the id so that each ID is unique\n          self.idCount = self.idCount + UInt64(1)\n      }\n  }\n\n  init() {\n    // store an empty NFT Collection in account storage\n    self.account.save<@Collection>(<-self.createEmptyCollection(), to: /storage/NFTCollection)\n\n    // publish a reference to the Collection in storage\n    self.account.link<&{NFTReceiver}>(/public/NFTReceiver, target: /storage/NFTCollection)\n\n    // store a minter resource in account storage\n    self.account.save<@NFTMinter>(<-create NFTMinter(), to: /storage/NFTMinter)\n\n    emit TestEvent(ufix: 64.10, uint: 64, test: \"foobar\" )\n  }\n}\n",
		},
	},
	"mainnet": overflow.MergedSolutionNetwork{
		Scripts: map[string]overflow.CodeWithSpec{
			"block": overflow.CodeWithSpec{Code: `// test script to ensure code is running
pub fun main(): UInt64 {
    let height = getCurrentBlock().height
    log(height)
    return height
}`},
			"test": overflow.CodeWithSpec{
				Code: `// test script to ensure code is running
import NonFungibleToken from 0x1d7e57aa55817448

pub fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				Spec: &overflow.DeclarationInfo{
					ParameterOrder: []string{
						"account",
					},
					Parameters: map[string]string{"account": "Address"},
				},
			},
		},
		Transactions: map[string]overflow.CodeWithSpec{
			"arguments": overflow.CodeWithSpec{
				Code: `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
  prepare(acct: AuthAccount) {
    log(acct)
    log(test)

 }
}`,
				Spec: &overflow.DeclarationInfo{
					ParameterOrder: []string{
						"test",
					},
					Parameters: map[string]string{"test": "String"},
				},
			},
			"argumentsWithAccount": overflow.CodeWithSpec{
				Code: `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:Address) {
  prepare(acct: AuthAccount) {
    log("signer")
    log(acct)
    log("argument")
    log(test)
 }
}`,
				Spec: &overflow.DeclarationInfo{
					ParameterOrder: []string{
						"test",
					},
					Parameters: map[string]string{"test": "Address"},
				},
			},
			"create_nft_collection": overflow.CodeWithSpec{Code: `import NonFungibleToken from 0x1d7e57aa55817448

// This transaction creates an empty NFT Collection in the signer's account
transaction {
  prepare(acct: AuthAccount) {
    // store an empty NFT Collection in account storage
    acct.save<@NonFungibleToken.Collection>(<-NonFungibleToken.createEmptyCollection(), to: /storage/NFTCollection)

    // publish a capability to the Collection in storage
    acct.link<&{NonFungibleToken.NFTReceiver}>(/public/NFTReceiver, target: /storage/NFTCollection)

    log("Created a new empty collection and published a reference")
  }
}`},
			"mint_tokens": overflow.CodeWithSpec{
				Code: `import FungibleToken from 0xee82856bf20e2aa6
import FlowToken from 0x0ae53cb6e3f42a79


transaction(recipient: Address, amount: UFix64) {
    let tokenAdmin: &FlowToken.Administrator
    let tokenReceiver: &{FungibleToken.Receiver}

    prepare(signer: AuthAccount) {
        self.tokenAdmin = signer
            .borrow<&FlowToken.Administrator>(from: /storage/flowTokenAdmin)
            ?? panic("Signer is not the token admin")

        self.tokenReceiver = getAccount(recipient)
            .getCapability(/public/flowTokenReceiver)
            .borrow<&{FungibleToken.Receiver}>()
            ?? panic("Unable to borrow receiver reference")
    }

    execute {
        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)
        let mintedVault <- minter.mintTokens(amount: amount)

        self.tokenReceiver.deposit(from: <-mintedVault)

        destroy minter
    }
}`,
				Spec: &overflow.DeclarationInfo{
					ParameterOrder: []string{
						"recipient",
						"amount",
					},
					Parameters: map[string]string{
						"amount":    "UFix64",
						"recipient": "Address",
					},
				},
			},
			"signWithMultipleAccounts": overflow.CodeWithSpec{
				Code: `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
  prepare(acct: AuthAccount, account2: AuthAccount) {
    log(acct)
    log(account2)
 }
}`,
				Spec: &overflow.DeclarationInfo{
					ParameterOrder: []string{
						"test",
					},
					Parameters: map[string]string{"test": "String"},
				},
			},
		},
		Contracts: &map[string]string{"Debug": `import NonFungibleToken from 0x1d7e57aa55817448

pub contract Debug {


pub struct Foo{
	pub let bar: String

	init(bar: String) {
		self.bar=bar
	}
}

pub event Log(msg: String)
pub event LogNum(id: UInt64)

pub fun id(_ id:UInt64) {
	emit LogNum(id:id)
}

pub fun log(_ msg: String) : String {
	emit Log(msg: msg)
	return msg
}

}
`},
	},
	"testnet": overflow.MergedSolutionNetwork{
		Scripts: map[string]overflow.CodeWithSpec{
			"block": overflow.CodeWithSpec{Code: `// test script to ensure code is running
pub fun main(): UInt64 {
    let height = getCurrentBlock().height
    log(height)
    return height
}`},
			"test": overflow.CodeWithSpec{
				Code: `// test script to ensure code is running
import NonFungibleToken from 0x631e88ae7f1d7c20

pub fun main(account: Address): String {
    return getAccount(account).address.toString()
}`,
				Spec: &overflow.DeclarationInfo{
					ParameterOrder: []string{
						"account",
					},
					Parameters: map[string]string{"account": "Address"},
				},
			},
		},
		Transactions: map[string]overflow.CodeWithSpec{
			"arguments": overflow.CodeWithSpec{
				Code: `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
  prepare(acct: AuthAccount) {
    log(acct)
    log(test)

 }
}`,
				Spec: &overflow.DeclarationInfo{
					ParameterOrder: []string{
						"test",
					},
					Parameters: map[string]string{"test": "String"},
				},
			},
			"argumentsWithAccount": overflow.CodeWithSpec{
				Code: `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:Address) {
  prepare(acct: AuthAccount) {
    log("signer")
    log(acct)
    log("argument")
    log(test)
 }
}`,
				Spec: &overflow.DeclarationInfo{
					ParameterOrder: []string{
						"test",
					},
					Parameters: map[string]string{"test": "Address"},
				},
			},
			"create_nft_collection": overflow.CodeWithSpec{Code: `import NonFungibleToken from 0x631e88ae7f1d7c20

// This transaction creates an empty NFT Collection in the signer's account
transaction {
  prepare(acct: AuthAccount) {
    // store an empty NFT Collection in account storage
    acct.save<@NonFungibleToken.Collection>(<-NonFungibleToken.createEmptyCollection(), to: /storage/NFTCollection)

    // publish a capability to the Collection in storage
    acct.link<&{NonFungibleToken.NFTReceiver}>(/public/NFTReceiver, target: /storage/NFTCollection)

    log("Created a new empty collection and published a reference")
  }
}`},
			"mint_tokens": overflow.CodeWithSpec{
				Code: `import FungibleToken from 0xee82856bf20e2aa6
import FlowToken from 0x0ae53cb6e3f42a79


transaction(recipient: Address, amount: UFix64) {
    let tokenAdmin: &FlowToken.Administrator
    let tokenReceiver: &{FungibleToken.Receiver}

    prepare(signer: AuthAccount) {
        self.tokenAdmin = signer
            .borrow<&FlowToken.Administrator>(from: /storage/flowTokenAdmin)
            ?? panic("Signer is not the token admin")

        self.tokenReceiver = getAccount(recipient)
            .getCapability(/public/flowTokenReceiver)
            .borrow<&{FungibleToken.Receiver}>()
            ?? panic("Unable to borrow receiver reference")
    }

    execute {
        let minter <- self.tokenAdmin.createNewMinter(allowedAmount: amount)
        let mintedVault <- minter.mintTokens(amount: amount)

        self.tokenReceiver.deposit(from: <-mintedVault)

        destroy minter
    }
}`,
				Spec: &overflow.DeclarationInfo{
					ParameterOrder: []string{
						"recipient",
						"amount",
					},
					Parameters: map[string]string{
						"amount":    "UFix64",
						"recipient": "Address",
					},
				},
			},
			"signWithMultipleAccounts": overflow.CodeWithSpec{
				Code: `// This transaction creates an empty NFT Collection in the signer's account
transaction(test:String) {
  prepare(acct: AuthAccount, account2: AuthAccount) {
    log(acct)
    log(account2)
 }
}`,
				Spec: &overflow.DeclarationInfo{
					ParameterOrder: []string{
						"test",
					},
					Parameters: map[string]string{"test": "String"},
				},
			},
		},
		Contracts: &map[string]string{"Debug": `import NonFungibleToken from 0x631e88ae7f1d7c20

pub contract Debug {


pub struct Foo{
	pub let bar: String

	init(bar: String) {
		self.bar=bar
	}
}

pub event Log(msg: String)
pub event LogNum(id: UInt64)

pub fun id(_ id:UInt64) {
	emit LogNum(id:id)
}

pub fun log(_ msg: String) : String {
	emit Log(msg: msg)
	return msg
}

}
`},
	},
}}
